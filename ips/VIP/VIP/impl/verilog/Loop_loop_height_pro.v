// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_loop_height_pro (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        imag_1_data_stream_0_V_din,
        imag_1_data_stream_0_V_full_n,
        imag_1_data_stream_0_V_write,
        imag_1_data_stream_1_V_din,
        imag_1_data_stream_1_V_full_n,
        imag_1_data_stream_1_V_write,
        imag_1_data_stream_2_V_din,
        imag_1_data_stream_2_V_full_n,
        imag_1_data_stream_2_V_write,
        imagSrc_data_stream_0_V_dout,
        imagSrc_data_stream_0_V_empty_n,
        imagSrc_data_stream_0_V_read,
        imagSrc_data_stream_1_V_dout,
        imagSrc_data_stream_1_V_empty_n,
        imagSrc_data_stream_1_V_read,
        imagSrc_data_stream_2_V_dout,
        imagSrc_data_stream_2_V_empty_n,
        imagSrc_data_stream_2_V_read,
        mask2_Addr_A,
        mask2_EN_A,
        mask2_WEN_A,
        mask2_Din_A,
        mask2_Dout_A,
        src_axi0_TDATA,
        src_axi0_TVALID,
        src_axi0_TREADY,
        src_axi0_TKEEP,
        src_axi0_TSTRB,
        src_axi0_TUSER,
        src_axi0_TLAST,
        src_axi0_TID,
        src_axi0_TDEST
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_pp0_stage0 = 5'd8;
parameter    ap_ST_fsm_state8 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
output  [7:0] imag_1_data_stream_0_V_din;
input   imag_1_data_stream_0_V_full_n;
output   imag_1_data_stream_0_V_write;
output  [7:0] imag_1_data_stream_1_V_din;
input   imag_1_data_stream_1_V_full_n;
output   imag_1_data_stream_1_V_write;
output  [7:0] imag_1_data_stream_2_V_din;
input   imag_1_data_stream_2_V_full_n;
output   imag_1_data_stream_2_V_write;
input  [7:0] imagSrc_data_stream_0_V_dout;
input   imagSrc_data_stream_0_V_empty_n;
output   imagSrc_data_stream_0_V_read;
input  [7:0] imagSrc_data_stream_1_V_dout;
input   imagSrc_data_stream_1_V_empty_n;
output   imagSrc_data_stream_1_V_read;
input  [7:0] imagSrc_data_stream_2_V_dout;
input   imagSrc_data_stream_2_V_empty_n;
output   imagSrc_data_stream_2_V_read;
output  [31:0] mask2_Addr_A;
output   mask2_EN_A;
output  [3:0] mask2_WEN_A;
output  [31:0] mask2_Din_A;
input  [31:0] mask2_Dout_A;
input  [23:0] src_axi0_TDATA;
input   src_axi0_TVALID;
output   src_axi0_TREADY;
input  [2:0] src_axi0_TKEEP;
input  [2:0] src_axi0_TSTRB;
input  [0:0] src_axi0_TUSER;
input  [0:0] src_axi0_TLAST;
input  [0:0] src_axi0_TID;
input  [0:0] src_axi0_TDEST;

reg ap_done;
reg ap_idle;
reg start_write;
reg[7:0] imag_1_data_stream_0_V_din;
reg imag_1_data_stream_0_V_write;
reg[7:0] imag_1_data_stream_1_V_din;
reg imag_1_data_stream_1_V_write;
reg[7:0] imag_1_data_stream_2_V_din;
reg imag_1_data_stream_2_V_write;
reg imagSrc_data_stream_0_V_read;
reg imagSrc_data_stream_1_V_read;
reg imagSrc_data_stream_2_V_read;
reg mask2_EN_A;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg   [23:0] src_axi0_V_data_V_0_data_out;
wire    src_axi0_V_data_V_0_vld_in;
wire    src_axi0_V_data_V_0_vld_out;
wire    src_axi0_V_data_V_0_ack_in;
reg    src_axi0_V_data_V_0_ack_out;
reg   [23:0] src_axi0_V_data_V_0_payload_A;
reg   [23:0] src_axi0_V_data_V_0_payload_B;
reg    src_axi0_V_data_V_0_sel_rd;
reg    src_axi0_V_data_V_0_sel_wr;
wire    src_axi0_V_data_V_0_sel;
wire    src_axi0_V_data_V_0_load_A;
wire    src_axi0_V_data_V_0_load_B;
reg   [1:0] src_axi0_V_data_V_0_state;
wire    src_axi0_V_data_V_0_state_cmp_full;
reg   [2:0] src_axi0_V_keep_V_0_data_out;
wire    src_axi0_V_keep_V_0_vld_in;
wire    src_axi0_V_keep_V_0_vld_out;
wire    src_axi0_V_keep_V_0_ack_in;
reg    src_axi0_V_keep_V_0_ack_out;
reg   [2:0] src_axi0_V_keep_V_0_payload_A;
reg   [2:0] src_axi0_V_keep_V_0_payload_B;
reg    src_axi0_V_keep_V_0_sel_rd;
reg    src_axi0_V_keep_V_0_sel_wr;
wire    src_axi0_V_keep_V_0_sel;
wire    src_axi0_V_keep_V_0_load_A;
wire    src_axi0_V_keep_V_0_load_B;
reg   [1:0] src_axi0_V_keep_V_0_state;
wire    src_axi0_V_keep_V_0_state_cmp_full;
reg   [2:0] src_axi0_V_strb_V_0_data_out;
wire    src_axi0_V_strb_V_0_vld_in;
wire    src_axi0_V_strb_V_0_vld_out;
wire    src_axi0_V_strb_V_0_ack_in;
reg    src_axi0_V_strb_V_0_ack_out;
reg   [2:0] src_axi0_V_strb_V_0_payload_A;
reg   [2:0] src_axi0_V_strb_V_0_payload_B;
reg    src_axi0_V_strb_V_0_sel_rd;
reg    src_axi0_V_strb_V_0_sel_wr;
wire    src_axi0_V_strb_V_0_sel;
wire    src_axi0_V_strb_V_0_load_A;
wire    src_axi0_V_strb_V_0_load_B;
reg   [1:0] src_axi0_V_strb_V_0_state;
wire    src_axi0_V_strb_V_0_state_cmp_full;
reg   [0:0] src_axi0_V_user_V_0_data_out;
wire    src_axi0_V_user_V_0_vld_in;
wire    src_axi0_V_user_V_0_vld_out;
wire    src_axi0_V_user_V_0_ack_in;
reg    src_axi0_V_user_V_0_ack_out;
reg   [0:0] src_axi0_V_user_V_0_payload_A;
reg   [0:0] src_axi0_V_user_V_0_payload_B;
reg    src_axi0_V_user_V_0_sel_rd;
reg    src_axi0_V_user_V_0_sel_wr;
wire    src_axi0_V_user_V_0_sel;
wire    src_axi0_V_user_V_0_load_A;
wire    src_axi0_V_user_V_0_load_B;
reg   [1:0] src_axi0_V_user_V_0_state;
wire    src_axi0_V_user_V_0_state_cmp_full;
reg   [0:0] src_axi0_V_last_V_0_data_out;
wire    src_axi0_V_last_V_0_vld_in;
wire    src_axi0_V_last_V_0_vld_out;
wire    src_axi0_V_last_V_0_ack_in;
reg    src_axi0_V_last_V_0_ack_out;
reg   [0:0] src_axi0_V_last_V_0_payload_A;
reg   [0:0] src_axi0_V_last_V_0_payload_B;
reg    src_axi0_V_last_V_0_sel_rd;
reg    src_axi0_V_last_V_0_sel_wr;
wire    src_axi0_V_last_V_0_sel;
wire    src_axi0_V_last_V_0_load_A;
wire    src_axi0_V_last_V_0_load_B;
reg   [1:0] src_axi0_V_last_V_0_state;
wire    src_axi0_V_last_V_0_state_cmp_full;
reg   [0:0] src_axi0_V_id_V_0_data_out;
wire    src_axi0_V_id_V_0_vld_in;
wire    src_axi0_V_id_V_0_vld_out;
wire    src_axi0_V_id_V_0_ack_in;
reg    src_axi0_V_id_V_0_ack_out;
reg   [0:0] src_axi0_V_id_V_0_payload_A;
reg   [0:0] src_axi0_V_id_V_0_payload_B;
reg    src_axi0_V_id_V_0_sel_rd;
reg    src_axi0_V_id_V_0_sel_wr;
wire    src_axi0_V_id_V_0_sel;
wire    src_axi0_V_id_V_0_load_A;
wire    src_axi0_V_id_V_0_load_B;
reg   [1:0] src_axi0_V_id_V_0_state;
wire    src_axi0_V_id_V_0_state_cmp_full;
reg   [0:0] src_axi0_V_dest_V_0_data_out;
wire    src_axi0_V_dest_V_0_vld_in;
wire    src_axi0_V_dest_V_0_vld_out;
wire    src_axi0_V_dest_V_0_ack_in;
reg    src_axi0_V_dest_V_0_ack_out;
reg   [0:0] src_axi0_V_dest_V_0_payload_A;
reg   [0:0] src_axi0_V_dest_V_0_payload_B;
reg    src_axi0_V_dest_V_0_sel_rd;
reg    src_axi0_V_dest_V_0_sel_wr;
wire    src_axi0_V_dest_V_0_sel;
wire    src_axi0_V_dest_V_0_load_A;
wire    src_axi0_V_dest_V_0_load_B;
reg   [1:0] src_axi0_V_dest_V_0_state;
wire    src_axi0_V_dest_V_0_state_cmp_full;
reg    imag_1_data_stream_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln334_reg_533;
reg   [0:0] icmp_ln334_reg_533_pp0_iter2_reg;
reg    imag_1_data_stream_1_V_blk_n;
reg    imag_1_data_stream_2_V_blk_n;
reg    imagSrc_data_stream_0_V_blk_n;
reg    imagSrc_data_stream_1_V_blk_n;
reg    imagSrc_data_stream_2_V_blk_n;
reg   [10:0] t_V_1_reg_252;
reg   [20:0] op2_assign_reg_263;
wire   [10:0] i_V_fu_303_p2;
reg   [10:0] i_V_reg_486;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln887_1_fu_309_p2;
reg   [0:0] icmp_ln887_1_reg_491;
wire   [0:0] icmp_ln887_fu_297_p2;
wire   [20:0] k_fu_324_p2;
reg   [20:0] k_reg_500;
wire    ap_CS_fsm_state3;
wire    grp_AXIvideo2Mat2_fu_273_ap_ready;
wire    grp_AXIvideo2Mat2_fu_273_ap_done;
reg    ap_block_state3_on_subcall_done;
wire   [0:0] icmp_ln887_2_fu_330_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire   [7:0] imag0_0_data_stream_s_dout;
wire    imag0_0_data_stream_s_empty_n;
reg    imag0_0_data_stream_s_read;
reg   [0:0] icmp_ln330_reg_529;
wire   [7:0] imag0_0_data_stream_1_dout;
wire    imag0_0_data_stream_1_empty_n;
reg    imag0_0_data_stream_1_read;
wire   [7:0] imag0_0_data_stream_2_dout;
wire    imag0_0_data_stream_2_empty_n;
reg    imag0_0_data_stream_2_read;
reg    ap_block_state6_pp0_stage0_iter2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_state7_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] j_V_fu_336_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [3:0] trunc_ln330_fu_357_p1;
reg   [3:0] trunc_ln330_reg_519;
wire   [20:0] add_ln324_fu_361_p2;
wire   [0:0] icmp_ln330_fu_390_p2;
wire   [0:0] icmp_ln334_fu_408_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
reg    ap_enable_reg_pp0_iter1;
wire    grp_AXIvideo2Mat2_fu_273_ap_start;
wire    grp_AXIvideo2Mat2_fu_273_ap_idle;
wire    grp_AXIvideo2Mat2_fu_273_src_axi0_TVALID;
wire    grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY;
wire   [7:0] grp_AXIvideo2Mat2_fu_273_img_data_stream_0_V_din;
wire    grp_AXIvideo2Mat2_fu_273_img_data_stream_0_V_write;
wire   [7:0] grp_AXIvideo2Mat2_fu_273_img_data_stream_1_V_din;
wire    grp_AXIvideo2Mat2_fu_273_img_data_stream_1_V_write;
wire   [7:0] grp_AXIvideo2Mat2_fu_273_img_data_stream_2_V_din;
wire    grp_AXIvideo2Mat2_fu_273_img_data_stream_2_V_write;
wire    grp_AXIvideo2Mat2_fu_273_sof_read;
wire   [0:0] grp_AXIvideo2Mat2_fu_273_ap_return;
reg   [10:0] t_V_reg_228;
reg    ap_block_state1;
wire    ap_CS_fsm_state8;
reg   [20:0] k_0_reg_240;
reg    grp_AXIvideo2Mat2_fu_273_ap_start_reg;
wire    imag0_0_data_stream_s_full_n;
reg    imag0_0_data_stream_s_write;
wire    imag0_0_data_stream_1_full_n;
reg    imag0_0_data_stream_1_write;
wire    imag0_0_data_stream_2_full_n;
reg    imag0_0_data_stream_2_write;
wire   [63:0] zext_ln330_fu_352_p1;
reg   [0:0] sof_1_fu_130;
reg   [7:0] tmp_fu_134;
reg   [7:0] tmp_9_fu_138;
reg   [7:0] tmp_10_fu_142;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] mask2_Addr_A_orig;
wire   [16:0] lshr_ln_fu_342_p4;
wire   [4:0] shl_ln_fu_367_p3;
wire   [31:0] zext_ln330_1_fu_374_p1;
wire   [31:0] shl_ln330_fu_378_p2;
wire   [31:0] and_ln330_fu_384_p2;
wire   [31:0] shl_ln334_fu_396_p2;
wire   [31:0] and_ln334_fu_402_p2;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 5'd1;
#0 src_axi0_V_data_V_0_sel_rd = 1'b0;
#0 src_axi0_V_data_V_0_sel_wr = 1'b0;
#0 src_axi0_V_data_V_0_state = 2'd0;
#0 src_axi0_V_keep_V_0_sel_rd = 1'b0;
#0 src_axi0_V_keep_V_0_sel_wr = 1'b0;
#0 src_axi0_V_keep_V_0_state = 2'd0;
#0 src_axi0_V_strb_V_0_sel_rd = 1'b0;
#0 src_axi0_V_strb_V_0_sel_wr = 1'b0;
#0 src_axi0_V_strb_V_0_state = 2'd0;
#0 src_axi0_V_user_V_0_sel_rd = 1'b0;
#0 src_axi0_V_user_V_0_sel_wr = 1'b0;
#0 src_axi0_V_user_V_0_state = 2'd0;
#0 src_axi0_V_last_V_0_sel_rd = 1'b0;
#0 src_axi0_V_last_V_0_sel_wr = 1'b0;
#0 src_axi0_V_last_V_0_state = 2'd0;
#0 src_axi0_V_id_V_0_sel_rd = 1'b0;
#0 src_axi0_V_id_V_0_sel_wr = 1'b0;
#0 src_axi0_V_id_V_0_state = 2'd0;
#0 src_axi0_V_dest_V_0_sel_rd = 1'b0;
#0 src_axi0_V_dest_V_0_sel_wr = 1'b0;
#0 src_axi0_V_dest_V_0_state = 2'd0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_AXIvideo2Mat2_fu_273_ap_start_reg = 1'b0;
end

AXIvideo2Mat2 grp_AXIvideo2Mat2_fu_273(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AXIvideo2Mat2_fu_273_ap_start),
    .ap_done(grp_AXIvideo2Mat2_fu_273_ap_done),
    .ap_idle(grp_AXIvideo2Mat2_fu_273_ap_idle),
    .ap_ready(grp_AXIvideo2Mat2_fu_273_ap_ready),
    .src_axi0_TDATA(src_axi0_V_data_V_0_data_out),
    .src_axi0_TVALID(grp_AXIvideo2Mat2_fu_273_src_axi0_TVALID),
    .src_axi0_TREADY(grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY),
    .src_axi0_TKEEP(src_axi0_V_keep_V_0_data_out),
    .src_axi0_TSTRB(src_axi0_V_strb_V_0_data_out),
    .src_axi0_TUSER(src_axi0_V_user_V_0_data_out),
    .src_axi0_TLAST(src_axi0_V_last_V_0_data_out),
    .src_axi0_TID(src_axi0_V_id_V_0_data_out),
    .src_axi0_TDEST(src_axi0_V_dest_V_0_data_out),
    .img_data_stream_0_V_din(grp_AXIvideo2Mat2_fu_273_img_data_stream_0_V_din),
    .img_data_stream_0_V_full_n(imag0_0_data_stream_s_full_n),
    .img_data_stream_0_V_write(grp_AXIvideo2Mat2_fu_273_img_data_stream_0_V_write),
    .img_data_stream_1_V_din(grp_AXIvideo2Mat2_fu_273_img_data_stream_1_V_din),
    .img_data_stream_1_V_full_n(imag0_0_data_stream_1_full_n),
    .img_data_stream_1_V_write(grp_AXIvideo2Mat2_fu_273_img_data_stream_1_V_write),
    .img_data_stream_2_V_din(grp_AXIvideo2Mat2_fu_273_img_data_stream_2_V_din),
    .img_data_stream_2_V_full_n(imag0_0_data_stream_2_full_n),
    .img_data_stream_2_V_write(grp_AXIvideo2Mat2_fu_273_img_data_stream_2_V_write),
    .p_row(t_V_reg_228),
    .sof_read(grp_AXIvideo2Mat2_fu_273_sof_read),
    .ap_return(grp_AXIvideo2Mat2_fu_273_ap_return)
);

fifo_w8_d1920_A imag0_0_data_stream_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_AXIvideo2Mat2_fu_273_img_data_stream_0_V_din),
    .if_full_n(imag0_0_data_stream_s_full_n),
    .if_write(imag0_0_data_stream_s_write),
    .if_dout(imag0_0_data_stream_s_dout),
    .if_empty_n(imag0_0_data_stream_s_empty_n),
    .if_read(imag0_0_data_stream_s_read)
);

fifo_w8_d1920_A imag0_0_data_stream_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_AXIvideo2Mat2_fu_273_img_data_stream_1_V_din),
    .if_full_n(imag0_0_data_stream_1_full_n),
    .if_write(imag0_0_data_stream_1_write),
    .if_dout(imag0_0_data_stream_1_dout),
    .if_empty_n(imag0_0_data_stream_1_empty_n),
    .if_read(imag0_0_data_stream_1_read)
);

fifo_w8_d1920_A imag0_0_data_stream_2_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(grp_AXIvideo2Mat2_fu_273_img_data_stream_2_V_din),
    .if_full_n(imag0_0_data_stream_2_full_n),
    .if_write(imag0_0_data_stream_2_write),
    .if_dout(imag0_0_data_stream_2_dout),
    .if_empty_n(imag0_0_data_stream_2_empty_n),
    .if_read(imag0_0_data_stream_2_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln887_fu_297_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state4)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state4);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_AXIvideo2Mat2_fu_273_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln887_1_fu_309_p2 == 1'd1) & (icmp_ln887_fu_297_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_AXIvideo2Mat2_fu_273_ap_start_reg <= 1'b1;
        end else if ((grp_AXIvideo2Mat2_fu_273_ap_ready == 1'b1)) begin
            grp_AXIvideo2Mat2_fu_273_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_axi0_V_data_V_0_ack_out == 1'b1) & (src_axi0_V_data_V_0_vld_out == 1'b1))) begin
            src_axi0_V_data_V_0_sel_rd <= ~src_axi0_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_axi0_V_data_V_0_ack_in == 1'b1) & (src_axi0_V_data_V_0_vld_in == 1'b1))) begin
            src_axi0_V_data_V_0_sel_wr <= ~src_axi0_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((src_axi0_V_data_V_0_state == 2'd2) & (src_axi0_V_data_V_0_vld_in == 1'b0)) | ((src_axi0_V_data_V_0_state == 2'd3) & (src_axi0_V_data_V_0_vld_in == 1'b0) & (src_axi0_V_data_V_0_ack_out == 1'b1)))) begin
            src_axi0_V_data_V_0_state <= 2'd2;
        end else if ((((src_axi0_V_data_V_0_state == 2'd1) & (src_axi0_V_data_V_0_ack_out == 1'b0)) | ((src_axi0_V_data_V_0_state == 2'd3) & (src_axi0_V_data_V_0_ack_out == 1'b0) & (src_axi0_V_data_V_0_vld_in == 1'b1)))) begin
            src_axi0_V_data_V_0_state <= 2'd1;
        end else if (((~((src_axi0_V_data_V_0_vld_in == 1'b0) & (src_axi0_V_data_V_0_ack_out == 1'b1)) & ~((src_axi0_V_data_V_0_ack_out == 1'b0) & (src_axi0_V_data_V_0_vld_in == 1'b1)) & (src_axi0_V_data_V_0_state == 2'd3)) | ((src_axi0_V_data_V_0_state == 2'd1) & (src_axi0_V_data_V_0_ack_out == 1'b1)) | ((src_axi0_V_data_V_0_state == 2'd2) & (src_axi0_V_data_V_0_vld_in == 1'b1)))) begin
            src_axi0_V_data_V_0_state <= 2'd3;
        end else begin
            src_axi0_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_axi0_V_dest_V_0_ack_out == 1'b1) & (src_axi0_V_dest_V_0_vld_out == 1'b1))) begin
            src_axi0_V_dest_V_0_sel_rd <= ~src_axi0_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_axi0_V_dest_V_0_ack_in == 1'b1) & (src_axi0_V_dest_V_0_vld_in == 1'b1))) begin
            src_axi0_V_dest_V_0_sel_wr <= ~src_axi0_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((src_axi0_V_dest_V_0_state == 2'd2) & (src_axi0_V_dest_V_0_vld_in == 1'b0)) | ((src_axi0_V_dest_V_0_state == 2'd3) & (src_axi0_V_dest_V_0_vld_in == 1'b0) & (src_axi0_V_dest_V_0_ack_out == 1'b1)))) begin
            src_axi0_V_dest_V_0_state <= 2'd2;
        end else if ((((src_axi0_V_dest_V_0_state == 2'd1) & (src_axi0_V_dest_V_0_ack_out == 1'b0)) | ((src_axi0_V_dest_V_0_state == 2'd3) & (src_axi0_V_dest_V_0_ack_out == 1'b0) & (src_axi0_V_dest_V_0_vld_in == 1'b1)))) begin
            src_axi0_V_dest_V_0_state <= 2'd1;
        end else if (((~((src_axi0_V_dest_V_0_vld_in == 1'b0) & (src_axi0_V_dest_V_0_ack_out == 1'b1)) & ~((src_axi0_V_dest_V_0_ack_out == 1'b0) & (src_axi0_V_dest_V_0_vld_in == 1'b1)) & (src_axi0_V_dest_V_0_state == 2'd3)) | ((src_axi0_V_dest_V_0_state == 2'd1) & (src_axi0_V_dest_V_0_ack_out == 1'b1)) | ((src_axi0_V_dest_V_0_state == 2'd2) & (src_axi0_V_dest_V_0_vld_in == 1'b1)))) begin
            src_axi0_V_dest_V_0_state <= 2'd3;
        end else begin
            src_axi0_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_axi0_V_id_V_0_ack_out == 1'b1) & (src_axi0_V_id_V_0_vld_out == 1'b1))) begin
            src_axi0_V_id_V_0_sel_rd <= ~src_axi0_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_axi0_V_id_V_0_ack_in == 1'b1) & (src_axi0_V_id_V_0_vld_in == 1'b1))) begin
            src_axi0_V_id_V_0_sel_wr <= ~src_axi0_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((src_axi0_V_id_V_0_state == 2'd2) & (src_axi0_V_id_V_0_vld_in == 1'b0)) | ((src_axi0_V_id_V_0_state == 2'd3) & (src_axi0_V_id_V_0_vld_in == 1'b0) & (src_axi0_V_id_V_0_ack_out == 1'b1)))) begin
            src_axi0_V_id_V_0_state <= 2'd2;
        end else if ((((src_axi0_V_id_V_0_state == 2'd1) & (src_axi0_V_id_V_0_ack_out == 1'b0)) | ((src_axi0_V_id_V_0_state == 2'd3) & (src_axi0_V_id_V_0_ack_out == 1'b0) & (src_axi0_V_id_V_0_vld_in == 1'b1)))) begin
            src_axi0_V_id_V_0_state <= 2'd1;
        end else if (((~((src_axi0_V_id_V_0_vld_in == 1'b0) & (src_axi0_V_id_V_0_ack_out == 1'b1)) & ~((src_axi0_V_id_V_0_ack_out == 1'b0) & (src_axi0_V_id_V_0_vld_in == 1'b1)) & (src_axi0_V_id_V_0_state == 2'd3)) | ((src_axi0_V_id_V_0_state == 2'd1) & (src_axi0_V_id_V_0_ack_out == 1'b1)) | ((src_axi0_V_id_V_0_state == 2'd2) & (src_axi0_V_id_V_0_vld_in == 1'b1)))) begin
            src_axi0_V_id_V_0_state <= 2'd3;
        end else begin
            src_axi0_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_axi0_V_keep_V_0_ack_out == 1'b1) & (src_axi0_V_keep_V_0_vld_out == 1'b1))) begin
            src_axi0_V_keep_V_0_sel_rd <= ~src_axi0_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_axi0_V_keep_V_0_ack_in == 1'b1) & (src_axi0_V_keep_V_0_vld_in == 1'b1))) begin
            src_axi0_V_keep_V_0_sel_wr <= ~src_axi0_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((src_axi0_V_keep_V_0_state == 2'd2) & (src_axi0_V_keep_V_0_vld_in == 1'b0)) | ((src_axi0_V_keep_V_0_state == 2'd3) & (src_axi0_V_keep_V_0_vld_in == 1'b0) & (src_axi0_V_keep_V_0_ack_out == 1'b1)))) begin
            src_axi0_V_keep_V_0_state <= 2'd2;
        end else if ((((src_axi0_V_keep_V_0_state == 2'd1) & (src_axi0_V_keep_V_0_ack_out == 1'b0)) | ((src_axi0_V_keep_V_0_state == 2'd3) & (src_axi0_V_keep_V_0_ack_out == 1'b0) & (src_axi0_V_keep_V_0_vld_in == 1'b1)))) begin
            src_axi0_V_keep_V_0_state <= 2'd1;
        end else if (((~((src_axi0_V_keep_V_0_vld_in == 1'b0) & (src_axi0_V_keep_V_0_ack_out == 1'b1)) & ~((src_axi0_V_keep_V_0_ack_out == 1'b0) & (src_axi0_V_keep_V_0_vld_in == 1'b1)) & (src_axi0_V_keep_V_0_state == 2'd3)) | ((src_axi0_V_keep_V_0_state == 2'd1) & (src_axi0_V_keep_V_0_ack_out == 1'b1)) | ((src_axi0_V_keep_V_0_state == 2'd2) & (src_axi0_V_keep_V_0_vld_in == 1'b1)))) begin
            src_axi0_V_keep_V_0_state <= 2'd3;
        end else begin
            src_axi0_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_axi0_V_last_V_0_ack_out == 1'b1) & (src_axi0_V_last_V_0_vld_out == 1'b1))) begin
            src_axi0_V_last_V_0_sel_rd <= ~src_axi0_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_axi0_V_last_V_0_ack_in == 1'b1) & (src_axi0_V_last_V_0_vld_in == 1'b1))) begin
            src_axi0_V_last_V_0_sel_wr <= ~src_axi0_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((src_axi0_V_last_V_0_state == 2'd2) & (src_axi0_V_last_V_0_vld_in == 1'b0)) | ((src_axi0_V_last_V_0_state == 2'd3) & (src_axi0_V_last_V_0_vld_in == 1'b0) & (src_axi0_V_last_V_0_ack_out == 1'b1)))) begin
            src_axi0_V_last_V_0_state <= 2'd2;
        end else if ((((src_axi0_V_last_V_0_state == 2'd1) & (src_axi0_V_last_V_0_ack_out == 1'b0)) | ((src_axi0_V_last_V_0_state == 2'd3) & (src_axi0_V_last_V_0_ack_out == 1'b0) & (src_axi0_V_last_V_0_vld_in == 1'b1)))) begin
            src_axi0_V_last_V_0_state <= 2'd1;
        end else if (((~((src_axi0_V_last_V_0_vld_in == 1'b0) & (src_axi0_V_last_V_0_ack_out == 1'b1)) & ~((src_axi0_V_last_V_0_ack_out == 1'b0) & (src_axi0_V_last_V_0_vld_in == 1'b1)) & (src_axi0_V_last_V_0_state == 2'd3)) | ((src_axi0_V_last_V_0_state == 2'd1) & (src_axi0_V_last_V_0_ack_out == 1'b1)) | ((src_axi0_V_last_V_0_state == 2'd2) & (src_axi0_V_last_V_0_vld_in == 1'b1)))) begin
            src_axi0_V_last_V_0_state <= 2'd3;
        end else begin
            src_axi0_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_axi0_V_strb_V_0_ack_out == 1'b1) & (src_axi0_V_strb_V_0_vld_out == 1'b1))) begin
            src_axi0_V_strb_V_0_sel_rd <= ~src_axi0_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_axi0_V_strb_V_0_ack_in == 1'b1) & (src_axi0_V_strb_V_0_vld_in == 1'b1))) begin
            src_axi0_V_strb_V_0_sel_wr <= ~src_axi0_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((src_axi0_V_strb_V_0_state == 2'd2) & (src_axi0_V_strb_V_0_vld_in == 1'b0)) | ((src_axi0_V_strb_V_0_state == 2'd3) & (src_axi0_V_strb_V_0_vld_in == 1'b0) & (src_axi0_V_strb_V_0_ack_out == 1'b1)))) begin
            src_axi0_V_strb_V_0_state <= 2'd2;
        end else if ((((src_axi0_V_strb_V_0_state == 2'd1) & (src_axi0_V_strb_V_0_ack_out == 1'b0)) | ((src_axi0_V_strb_V_0_state == 2'd3) & (src_axi0_V_strb_V_0_ack_out == 1'b0) & (src_axi0_V_strb_V_0_vld_in == 1'b1)))) begin
            src_axi0_V_strb_V_0_state <= 2'd1;
        end else if (((~((src_axi0_V_strb_V_0_vld_in == 1'b0) & (src_axi0_V_strb_V_0_ack_out == 1'b1)) & ~((src_axi0_V_strb_V_0_ack_out == 1'b0) & (src_axi0_V_strb_V_0_vld_in == 1'b1)) & (src_axi0_V_strb_V_0_state == 2'd3)) | ((src_axi0_V_strb_V_0_state == 2'd1) & (src_axi0_V_strb_V_0_ack_out == 1'b1)) | ((src_axi0_V_strb_V_0_state == 2'd2) & (src_axi0_V_strb_V_0_vld_in == 1'b1)))) begin
            src_axi0_V_strb_V_0_state <= 2'd3;
        end else begin
            src_axi0_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_axi0_V_user_V_0_ack_out == 1'b1) & (src_axi0_V_user_V_0_vld_out == 1'b1))) begin
            src_axi0_V_user_V_0_sel_rd <= ~src_axi0_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_axi0_V_user_V_0_ack_in == 1'b1) & (src_axi0_V_user_V_0_vld_in == 1'b1))) begin
            src_axi0_V_user_V_0_sel_wr <= ~src_axi0_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        src_axi0_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((src_axi0_V_user_V_0_state == 2'd2) & (src_axi0_V_user_V_0_vld_in == 1'b0)) | ((src_axi0_V_user_V_0_state == 2'd3) & (src_axi0_V_user_V_0_vld_in == 1'b0) & (src_axi0_V_user_V_0_ack_out == 1'b1)))) begin
            src_axi0_V_user_V_0_state <= 2'd2;
        end else if ((((src_axi0_V_user_V_0_state == 2'd1) & (src_axi0_V_user_V_0_ack_out == 1'b0)) | ((src_axi0_V_user_V_0_state == 2'd3) & (src_axi0_V_user_V_0_ack_out == 1'b0) & (src_axi0_V_user_V_0_vld_in == 1'b1)))) begin
            src_axi0_V_user_V_0_state <= 2'd1;
        end else if (((~((src_axi0_V_user_V_0_vld_in == 1'b0) & (src_axi0_V_user_V_0_ack_out == 1'b1)) & ~((src_axi0_V_user_V_0_ack_out == 1'b0) & (src_axi0_V_user_V_0_vld_in == 1'b1)) & (src_axi0_V_user_V_0_state == 2'd3)) | ((src_axi0_V_user_V_0_state == 2'd1) & (src_axi0_V_user_V_0_ack_out == 1'b1)) | ((src_axi0_V_user_V_0_state == 2'd2) & (src_axi0_V_user_V_0_vld_in == 1'b1)))) begin
            src_axi0_V_user_V_0_state <= 2'd3;
        end else begin
            src_axi0_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        k_0_reg_240 <= k_reg_500;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        k_0_reg_240 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_fu_330_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        op2_assign_reg_263 <= add_ln324_fu_361_p2;
    end else if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        op2_assign_reg_263 <= k_0_reg_240;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_fu_330_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_V_1_reg_252 <= j_V_fu_336_p2;
    end else if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        t_V_1_reg_252 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        t_V_reg_228 <= i_V_reg_486;
    end else if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        t_V_reg_228 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_V_reg_486 <= i_V_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln330_reg_529 <= icmp_ln330_fu_390_p2;
        icmp_ln334_reg_533 <= icmp_ln334_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln334_reg_533_pp0_iter2_reg <= icmp_ln334_reg_533;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_fu_297_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln887_1_reg_491 <= icmp_ln887_1_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        k_reg_500 <= k_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_1_reg_491 == 1'd1) & (1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
        sof_1_fu_130 <= grp_AXIvideo2Mat2_fu_273_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((src_axi0_V_data_V_0_load_A == 1'b1)) begin
        src_axi0_V_data_V_0_payload_A <= src_axi0_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((src_axi0_V_data_V_0_load_B == 1'b1)) begin
        src_axi0_V_data_V_0_payload_B <= src_axi0_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((src_axi0_V_dest_V_0_load_A == 1'b1)) begin
        src_axi0_V_dest_V_0_payload_A <= src_axi0_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((src_axi0_V_dest_V_0_load_B == 1'b1)) begin
        src_axi0_V_dest_V_0_payload_B <= src_axi0_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((src_axi0_V_id_V_0_load_A == 1'b1)) begin
        src_axi0_V_id_V_0_payload_A <= src_axi0_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((src_axi0_V_id_V_0_load_B == 1'b1)) begin
        src_axi0_V_id_V_0_payload_B <= src_axi0_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((src_axi0_V_keep_V_0_load_A == 1'b1)) begin
        src_axi0_V_keep_V_0_payload_A <= src_axi0_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((src_axi0_V_keep_V_0_load_B == 1'b1)) begin
        src_axi0_V_keep_V_0_payload_B <= src_axi0_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((src_axi0_V_last_V_0_load_A == 1'b1)) begin
        src_axi0_V_last_V_0_payload_A <= src_axi0_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((src_axi0_V_last_V_0_load_B == 1'b1)) begin
        src_axi0_V_last_V_0_payload_B <= src_axi0_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((src_axi0_V_strb_V_0_load_A == 1'b1)) begin
        src_axi0_V_strb_V_0_payload_A <= src_axi0_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((src_axi0_V_strb_V_0_load_B == 1'b1)) begin
        src_axi0_V_strb_V_0_payload_B <= src_axi0_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((src_axi0_V_user_V_0_load_A == 1'b1)) begin
        src_axi0_V_user_V_0_payload_A <= src_axi0_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((src_axi0_V_user_V_0_load_B == 1'b1)) begin
        src_axi0_V_user_V_0_payload_B <= src_axi0_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln330_reg_529 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        tmp_10_fu_142 <= imag0_0_data_stream_s_dout;
        tmp_9_fu_138 <= imag0_0_data_stream_1_dout;
        tmp_fu_134 <= imag0_0_data_stream_2_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln887_2_fu_330_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln330_reg_519 <= trunc_ln330_fu_357_p1;
    end
end

always @ (*) begin
    if ((icmp_ln887_2_fu_330_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_fu_297_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln330_reg_529 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        imag0_0_data_stream_1_read = 1'b1;
    end else begin
        imag0_0_data_stream_1_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_reg_491 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        imag0_0_data_stream_1_write = grp_AXIvideo2Mat2_fu_273_img_data_stream_1_V_write;
    end else begin
        imag0_0_data_stream_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln330_reg_529 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        imag0_0_data_stream_2_read = 1'b1;
    end else begin
        imag0_0_data_stream_2_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_reg_491 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        imag0_0_data_stream_2_write = grp_AXIvideo2Mat2_fu_273_img_data_stream_2_V_write;
    end else begin
        imag0_0_data_stream_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln330_reg_529 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        imag0_0_data_stream_s_read = 1'b1;
    end else begin
        imag0_0_data_stream_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_reg_491 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        imag0_0_data_stream_s_write = grp_AXIvideo2Mat2_fu_273_img_data_stream_0_V_write;
    end else begin
        imag0_0_data_stream_s_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        imagSrc_data_stream_0_V_blk_n = imagSrc_data_stream_0_V_empty_n;
    end else begin
        imagSrc_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        imagSrc_data_stream_0_V_read = 1'b1;
    end else begin
        imagSrc_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        imagSrc_data_stream_1_V_blk_n = imagSrc_data_stream_1_V_empty_n;
    end else begin
        imagSrc_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        imagSrc_data_stream_1_V_read = 1'b1;
    end else begin
        imagSrc_data_stream_1_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        imagSrc_data_stream_2_V_blk_n = imagSrc_data_stream_2_V_empty_n;
    end else begin
        imagSrc_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        imagSrc_data_stream_2_V_read = 1'b1;
    end else begin
        imagSrc_data_stream_2_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        imag_1_data_stream_0_V_blk_n = imag_1_data_stream_0_V_full_n;
    end else begin
        imag_1_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1)) begin
            imag_1_data_stream_0_V_din = imagSrc_data_stream_0_V_dout;
        end else if ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0)) begin
            imag_1_data_stream_0_V_din = tmp_10_fu_142;
        end else begin
            imag_1_data_stream_0_V_din = 'bx;
        end
    end else begin
        imag_1_data_stream_0_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        imag_1_data_stream_0_V_write = 1'b1;
    end else begin
        imag_1_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        imag_1_data_stream_1_V_blk_n = imag_1_data_stream_1_V_full_n;
    end else begin
        imag_1_data_stream_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1)) begin
            imag_1_data_stream_1_V_din = imagSrc_data_stream_1_V_dout;
        end else if ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0)) begin
            imag_1_data_stream_1_V_din = tmp_9_fu_138;
        end else begin
            imag_1_data_stream_1_V_din = 'bx;
        end
    end else begin
        imag_1_data_stream_1_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        imag_1_data_stream_1_V_write = 1'b1;
    end else begin
        imag_1_data_stream_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        imag_1_data_stream_2_V_blk_n = imag_1_data_stream_2_V_full_n;
    end else begin
        imag_1_data_stream_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        if ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1)) begin
            imag_1_data_stream_2_V_din = imagSrc_data_stream_2_V_dout;
        end else if ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0)) begin
            imag_1_data_stream_2_V_din = tmp_fu_134;
        end else begin
            imag_1_data_stream_2_V_din = 'bx;
        end
    end else begin
        imag_1_data_stream_2_V_din = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        imag_1_data_stream_2_V_write = 1'b1;
    end else begin
        imag_1_data_stream_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln887_fu_297_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mask2_EN_A = 1'b1;
    end else begin
        mask2_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_reg_491 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_axi0_V_data_V_0_ack_out = grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY;
    end else begin
        src_axi0_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_axi0_V_data_V_0_sel == 1'b1)) begin
        src_axi0_V_data_V_0_data_out = src_axi0_V_data_V_0_payload_B;
    end else begin
        src_axi0_V_data_V_0_data_out = src_axi0_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_reg_491 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_axi0_V_dest_V_0_ack_out = grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY;
    end else begin
        src_axi0_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_axi0_V_dest_V_0_sel == 1'b1)) begin
        src_axi0_V_dest_V_0_data_out = src_axi0_V_dest_V_0_payload_B;
    end else begin
        src_axi0_V_dest_V_0_data_out = src_axi0_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_reg_491 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_axi0_V_id_V_0_ack_out = grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY;
    end else begin
        src_axi0_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_axi0_V_id_V_0_sel == 1'b1)) begin
        src_axi0_V_id_V_0_data_out = src_axi0_V_id_V_0_payload_B;
    end else begin
        src_axi0_V_id_V_0_data_out = src_axi0_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_reg_491 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_axi0_V_keep_V_0_ack_out = grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY;
    end else begin
        src_axi0_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_axi0_V_keep_V_0_sel == 1'b1)) begin
        src_axi0_V_keep_V_0_data_out = src_axi0_V_keep_V_0_payload_B;
    end else begin
        src_axi0_V_keep_V_0_data_out = src_axi0_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_reg_491 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_axi0_V_last_V_0_ack_out = grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY;
    end else begin
        src_axi0_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_axi0_V_last_V_0_sel == 1'b1)) begin
        src_axi0_V_last_V_0_data_out = src_axi0_V_last_V_0_payload_B;
    end else begin
        src_axi0_V_last_V_0_data_out = src_axi0_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_reg_491 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_axi0_V_strb_V_0_ack_out = grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY;
    end else begin
        src_axi0_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_axi0_V_strb_V_0_sel == 1'b1)) begin
        src_axi0_V_strb_V_0_data_out = src_axi0_V_strb_V_0_payload_B;
    end else begin
        src_axi0_V_strb_V_0_data_out = src_axi0_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((icmp_ln887_1_reg_491 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        src_axi0_V_user_V_0_ack_out = grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY;
    end else begin
        src_axi0_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_axi0_V_user_V_0_sel == 1'b1)) begin
        src_axi0_V_user_V_0_data_out = src_axi0_V_user_V_0_payload_B;
    end else begin
        src_axi0_V_user_V_0_data_out = src_axi0_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln887_fu_297_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b0 == ap_block_state3_on_subcall_done) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln887_2_fu_330_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln887_2_fu_330_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln324_fu_361_p2 = (op2_assign_reg_263 + 21'd1);

assign and_ln330_fu_384_p2 = (shl_ln330_fu_378_p2 & mask2_Dout_A);

assign and_ln334_fu_402_p2 = (shl_ln334_fu_396_p2 & mask2_Dout_A);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln330_reg_529 == 1'd0) & (imag0_0_data_stream_2_empty_n == 1'b0)) | ((icmp_ln330_reg_529 == 1'd0) & (imag0_0_data_stream_1_empty_n == 1'b0)) | ((icmp_ln330_reg_529 == 1'd0) & (imag0_0_data_stream_s_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((imagSrc_data_stream_2_V_empty_n == 1'b0) | (imagSrc_data_stream_1_V_empty_n == 1'b0) | (imagSrc_data_stream_0_V_empty_n == 1'b0) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (imag_1_data_stream_2_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (imag_1_data_stream_1_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (imag_1_data_stream_0_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (imag_1_data_stream_2_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (imag_1_data_stream_1_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (imag_1_data_stream_0_V_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln330_reg_529 == 1'd0) & (imag0_0_data_stream_2_empty_n == 1'b0)) | ((icmp_ln330_reg_529 == 1'd0) & (imag0_0_data_stream_1_empty_n == 1'b0)) | ((icmp_ln330_reg_529 == 1'd0) & (imag0_0_data_stream_s_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((imagSrc_data_stream_2_V_empty_n == 1'b0) | (imagSrc_data_stream_1_V_empty_n == 1'b0) | (imagSrc_data_stream_0_V_empty_n == 1'b0) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (imag_1_data_stream_2_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (imag_1_data_stream_1_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (imag_1_data_stream_0_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (imag_1_data_stream_2_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (imag_1_data_stream_1_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (imag_1_data_stream_0_V_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (((icmp_ln330_reg_529 == 1'd0) & (imag0_0_data_stream_2_empty_n == 1'b0)) | ((icmp_ln330_reg_529 == 1'd0) & (imag0_0_data_stream_1_empty_n == 1'b0)) | ((icmp_ln330_reg_529 == 1'd0) & (imag0_0_data_stream_s_empty_n == 1'b0)))) | ((ap_enable_reg_pp0_iter3 == 1'b1) & ((imagSrc_data_stream_2_V_empty_n == 1'b0) | (imagSrc_data_stream_1_V_empty_n == 1'b0) | (imagSrc_data_stream_0_V_empty_n == 1'b0) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (imag_1_data_stream_2_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (imag_1_data_stream_1_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (imag_1_data_stream_0_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (imag_1_data_stream_2_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (imag_1_data_stream_1_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (imag_1_data_stream_0_V_full_n == 1'b0)))));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state3_on_subcall_done = ((icmp_ln887_1_reg_491 == 1'd1) & (grp_AXIvideo2Mat2_fu_273_ap_done == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = (((icmp_ln330_reg_529 == 1'd0) & (imag0_0_data_stream_2_empty_n == 1'b0)) | ((icmp_ln330_reg_529 == 1'd0) & (imag0_0_data_stream_1_empty_n == 1'b0)) | ((icmp_ln330_reg_529 == 1'd0) & (imag0_0_data_stream_s_empty_n == 1'b0)));
end

always @ (*) begin
    ap_block_state7_pp0_stage0_iter3 = ((imagSrc_data_stream_2_V_empty_n == 1'b0) | (imagSrc_data_stream_1_V_empty_n == 1'b0) | (imagSrc_data_stream_0_V_empty_n == 1'b0) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (imag_1_data_stream_2_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (imag_1_data_stream_1_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd1) & (imag_1_data_stream_0_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (imag_1_data_stream_2_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (imag_1_data_stream_1_V_full_n == 1'b0)) | ((icmp_ln334_reg_533_pp0_iter2_reg == 1'd0) & (imag_1_data_stream_0_V_full_n == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign grp_AXIvideo2Mat2_fu_273_ap_start = grp_AXIvideo2Mat2_fu_273_ap_start_reg;

assign grp_AXIvideo2Mat2_fu_273_sof_read = sof_1_fu_130;

assign grp_AXIvideo2Mat2_fu_273_src_axi0_TVALID = src_axi0_V_dest_V_0_state[1'd0];

assign i_V_fu_303_p2 = (t_V_reg_228 + 11'd1);

assign icmp_ln330_fu_390_p2 = ((and_ln330_fu_384_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln334_fu_408_p2 = ((and_ln334_fu_402_p2 == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln887_1_fu_309_p2 = ((t_V_reg_228 < 11'd480) ? 1'b1 : 1'b0);

assign icmp_ln887_2_fu_330_p2 = ((t_V_1_reg_252 == 11'd1920) ? 1'b1 : 1'b0);

assign icmp_ln887_fu_297_p2 = ((t_V_reg_228 == 11'd1080) ? 1'b1 : 1'b0);

assign j_V_fu_336_p2 = (t_V_1_reg_252 + 11'd1);

assign k_fu_324_p2 = (k_0_reg_240 + 21'd1920);

assign lshr_ln_fu_342_p4 = {{op2_assign_reg_263[20:4]}};

assign mask2_Addr_A = mask2_Addr_A_orig << 32'd2;

assign mask2_Addr_A_orig = zext_ln330_fu_352_p1;

assign mask2_Din_A = 32'd0;

assign mask2_WEN_A = 4'd0;

assign shl_ln330_fu_378_p2 = 32'd3 << zext_ln330_1_fu_374_p1;

assign shl_ln334_fu_396_p2 = 32'd2 << zext_ln330_1_fu_374_p1;

assign shl_ln_fu_367_p3 = {{trunc_ln330_reg_519}, {1'd0}};

assign src_axi0_TREADY = src_axi0_V_dest_V_0_state[1'd1];

assign src_axi0_V_data_V_0_ack_in = src_axi0_V_data_V_0_state[1'd1];

assign src_axi0_V_data_V_0_load_A = (src_axi0_V_data_V_0_state_cmp_full & ~src_axi0_V_data_V_0_sel_wr);

assign src_axi0_V_data_V_0_load_B = (src_axi0_V_data_V_0_state_cmp_full & src_axi0_V_data_V_0_sel_wr);

assign src_axi0_V_data_V_0_sel = src_axi0_V_data_V_0_sel_rd;

assign src_axi0_V_data_V_0_state_cmp_full = ((src_axi0_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_axi0_V_data_V_0_vld_in = src_axi0_TVALID;

assign src_axi0_V_data_V_0_vld_out = src_axi0_V_data_V_0_state[1'd0];

assign src_axi0_V_dest_V_0_ack_in = src_axi0_V_dest_V_0_state[1'd1];

assign src_axi0_V_dest_V_0_load_A = (src_axi0_V_dest_V_0_state_cmp_full & ~src_axi0_V_dest_V_0_sel_wr);

assign src_axi0_V_dest_V_0_load_B = (src_axi0_V_dest_V_0_state_cmp_full & src_axi0_V_dest_V_0_sel_wr);

assign src_axi0_V_dest_V_0_sel = src_axi0_V_dest_V_0_sel_rd;

assign src_axi0_V_dest_V_0_state_cmp_full = ((src_axi0_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_axi0_V_dest_V_0_vld_in = src_axi0_TVALID;

assign src_axi0_V_dest_V_0_vld_out = src_axi0_V_dest_V_0_state[1'd0];

assign src_axi0_V_id_V_0_ack_in = src_axi0_V_id_V_0_state[1'd1];

assign src_axi0_V_id_V_0_load_A = (src_axi0_V_id_V_0_state_cmp_full & ~src_axi0_V_id_V_0_sel_wr);

assign src_axi0_V_id_V_0_load_B = (src_axi0_V_id_V_0_state_cmp_full & src_axi0_V_id_V_0_sel_wr);

assign src_axi0_V_id_V_0_sel = src_axi0_V_id_V_0_sel_rd;

assign src_axi0_V_id_V_0_state_cmp_full = ((src_axi0_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_axi0_V_id_V_0_vld_in = src_axi0_TVALID;

assign src_axi0_V_id_V_0_vld_out = src_axi0_V_id_V_0_state[1'd0];

assign src_axi0_V_keep_V_0_ack_in = src_axi0_V_keep_V_0_state[1'd1];

assign src_axi0_V_keep_V_0_load_A = (src_axi0_V_keep_V_0_state_cmp_full & ~src_axi0_V_keep_V_0_sel_wr);

assign src_axi0_V_keep_V_0_load_B = (src_axi0_V_keep_V_0_state_cmp_full & src_axi0_V_keep_V_0_sel_wr);

assign src_axi0_V_keep_V_0_sel = src_axi0_V_keep_V_0_sel_rd;

assign src_axi0_V_keep_V_0_state_cmp_full = ((src_axi0_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_axi0_V_keep_V_0_vld_in = src_axi0_TVALID;

assign src_axi0_V_keep_V_0_vld_out = src_axi0_V_keep_V_0_state[1'd0];

assign src_axi0_V_last_V_0_ack_in = src_axi0_V_last_V_0_state[1'd1];

assign src_axi0_V_last_V_0_load_A = (src_axi0_V_last_V_0_state_cmp_full & ~src_axi0_V_last_V_0_sel_wr);

assign src_axi0_V_last_V_0_load_B = (src_axi0_V_last_V_0_state_cmp_full & src_axi0_V_last_V_0_sel_wr);

assign src_axi0_V_last_V_0_sel = src_axi0_V_last_V_0_sel_rd;

assign src_axi0_V_last_V_0_state_cmp_full = ((src_axi0_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_axi0_V_last_V_0_vld_in = src_axi0_TVALID;

assign src_axi0_V_last_V_0_vld_out = src_axi0_V_last_V_0_state[1'd0];

assign src_axi0_V_strb_V_0_ack_in = src_axi0_V_strb_V_0_state[1'd1];

assign src_axi0_V_strb_V_0_load_A = (src_axi0_V_strb_V_0_state_cmp_full & ~src_axi0_V_strb_V_0_sel_wr);

assign src_axi0_V_strb_V_0_load_B = (src_axi0_V_strb_V_0_state_cmp_full & src_axi0_V_strb_V_0_sel_wr);

assign src_axi0_V_strb_V_0_sel = src_axi0_V_strb_V_0_sel_rd;

assign src_axi0_V_strb_V_0_state_cmp_full = ((src_axi0_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_axi0_V_strb_V_0_vld_in = src_axi0_TVALID;

assign src_axi0_V_strb_V_0_vld_out = src_axi0_V_strb_V_0_state[1'd0];

assign src_axi0_V_user_V_0_ack_in = src_axi0_V_user_V_0_state[1'd1];

assign src_axi0_V_user_V_0_load_A = (src_axi0_V_user_V_0_state_cmp_full & ~src_axi0_V_user_V_0_sel_wr);

assign src_axi0_V_user_V_0_load_B = (src_axi0_V_user_V_0_state_cmp_full & src_axi0_V_user_V_0_sel_wr);

assign src_axi0_V_user_V_0_sel = src_axi0_V_user_V_0_sel_rd;

assign src_axi0_V_user_V_0_state_cmp_full = ((src_axi0_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_axi0_V_user_V_0_vld_in = src_axi0_TVALID;

assign src_axi0_V_user_V_0_vld_out = src_axi0_V_user_V_0_state[1'd0];

assign start_out = real_start;

assign trunc_ln330_fu_357_p1 = op2_assign_reg_263[3:0];

assign zext_ln330_1_fu_374_p1 = shl_ln_fu_367_p3;

assign zext_ln330_fu_352_p1 = lshr_ln_fu_342_p4;

endmodule //Loop_loop_height_pro
