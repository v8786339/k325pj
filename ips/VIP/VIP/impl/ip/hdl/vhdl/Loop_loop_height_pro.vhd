-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_loop_height_pro is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    imag_1_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    imag_1_data_stream_0_V_full_n : IN STD_LOGIC;
    imag_1_data_stream_0_V_write : OUT STD_LOGIC;
    imag_1_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    imag_1_data_stream_1_V_full_n : IN STD_LOGIC;
    imag_1_data_stream_1_V_write : OUT STD_LOGIC;
    imag_1_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    imag_1_data_stream_2_V_full_n : IN STD_LOGIC;
    imag_1_data_stream_2_V_write : OUT STD_LOGIC;
    imagSrc_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    imagSrc_data_stream_0_V_empty_n : IN STD_LOGIC;
    imagSrc_data_stream_0_V_read : OUT STD_LOGIC;
    imagSrc_data_stream_1_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    imagSrc_data_stream_1_V_empty_n : IN STD_LOGIC;
    imagSrc_data_stream_1_V_read : OUT STD_LOGIC;
    imagSrc_data_stream_2_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    imagSrc_data_stream_2_V_empty_n : IN STD_LOGIC;
    imagSrc_data_stream_2_V_read : OUT STD_LOGIC;
    mask2_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    mask2_EN_A : OUT STD_LOGIC;
    mask2_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    mask2_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    mask2_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    src_axi0_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    src_axi0_TVALID : IN STD_LOGIC;
    src_axi0_TREADY : OUT STD_LOGIC;
    src_axi0_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
    src_axi0_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
    src_axi0_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    src_axi0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    src_axi0_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    src_axi0_TDEST : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Loop_loop_height_pro is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv21_0 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000000";
    constant ap_const_lv11_438 : STD_LOGIC_VECTOR (10 downto 0) := "10000111000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_1E0 : STD_LOGIC_VECTOR (10 downto 0) := "00111100000";
    constant ap_const_lv21_780 : STD_LOGIC_VECTOR (20 downto 0) := "000000000011110000000";
    constant ap_const_lv11_780 : STD_LOGIC_VECTOR (10 downto 0) := "11110000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv21_1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal src_axi0_V_data_V_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal src_axi0_V_data_V_0_vld_in : STD_LOGIC;
    signal src_axi0_V_data_V_0_vld_out : STD_LOGIC;
    signal src_axi0_V_data_V_0_ack_in : STD_LOGIC;
    signal src_axi0_V_data_V_0_ack_out : STD_LOGIC;
    signal src_axi0_V_data_V_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal src_axi0_V_data_V_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal src_axi0_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal src_axi0_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal src_axi0_V_data_V_0_sel : STD_LOGIC;
    signal src_axi0_V_data_V_0_load_A : STD_LOGIC;
    signal src_axi0_V_data_V_0_load_B : STD_LOGIC;
    signal src_axi0_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_axi0_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal src_axi0_V_keep_V_0_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal src_axi0_V_keep_V_0_vld_in : STD_LOGIC;
    signal src_axi0_V_keep_V_0_vld_out : STD_LOGIC;
    signal src_axi0_V_keep_V_0_ack_in : STD_LOGIC;
    signal src_axi0_V_keep_V_0_ack_out : STD_LOGIC;
    signal src_axi0_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (2 downto 0);
    signal src_axi0_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (2 downto 0);
    signal src_axi0_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal src_axi0_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal src_axi0_V_keep_V_0_sel : STD_LOGIC;
    signal src_axi0_V_keep_V_0_load_A : STD_LOGIC;
    signal src_axi0_V_keep_V_0_load_B : STD_LOGIC;
    signal src_axi0_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_axi0_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal src_axi0_V_strb_V_0_data_out : STD_LOGIC_VECTOR (2 downto 0);
    signal src_axi0_V_strb_V_0_vld_in : STD_LOGIC;
    signal src_axi0_V_strb_V_0_vld_out : STD_LOGIC;
    signal src_axi0_V_strb_V_0_ack_in : STD_LOGIC;
    signal src_axi0_V_strb_V_0_ack_out : STD_LOGIC;
    signal src_axi0_V_strb_V_0_payload_A : STD_LOGIC_VECTOR (2 downto 0);
    signal src_axi0_V_strb_V_0_payload_B : STD_LOGIC_VECTOR (2 downto 0);
    signal src_axi0_V_strb_V_0_sel_rd : STD_LOGIC := '0';
    signal src_axi0_V_strb_V_0_sel_wr : STD_LOGIC := '0';
    signal src_axi0_V_strb_V_0_sel : STD_LOGIC;
    signal src_axi0_V_strb_V_0_load_A : STD_LOGIC;
    signal src_axi0_V_strb_V_0_load_B : STD_LOGIC;
    signal src_axi0_V_strb_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_axi0_V_strb_V_0_state_cmp_full : STD_LOGIC;
    signal src_axi0_V_user_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal src_axi0_V_user_V_0_vld_in : STD_LOGIC;
    signal src_axi0_V_user_V_0_vld_out : STD_LOGIC;
    signal src_axi0_V_user_V_0_ack_in : STD_LOGIC;
    signal src_axi0_V_user_V_0_ack_out : STD_LOGIC;
    signal src_axi0_V_user_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal src_axi0_V_user_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal src_axi0_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal src_axi0_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal src_axi0_V_user_V_0_sel : STD_LOGIC;
    signal src_axi0_V_user_V_0_load_A : STD_LOGIC;
    signal src_axi0_V_user_V_0_load_B : STD_LOGIC;
    signal src_axi0_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_axi0_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal src_axi0_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal src_axi0_V_last_V_0_vld_in : STD_LOGIC;
    signal src_axi0_V_last_V_0_vld_out : STD_LOGIC;
    signal src_axi0_V_last_V_0_ack_in : STD_LOGIC;
    signal src_axi0_V_last_V_0_ack_out : STD_LOGIC;
    signal src_axi0_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal src_axi0_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal src_axi0_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal src_axi0_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal src_axi0_V_last_V_0_sel : STD_LOGIC;
    signal src_axi0_V_last_V_0_load_A : STD_LOGIC;
    signal src_axi0_V_last_V_0_load_B : STD_LOGIC;
    signal src_axi0_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_axi0_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal src_axi0_V_id_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal src_axi0_V_id_V_0_vld_in : STD_LOGIC;
    signal src_axi0_V_id_V_0_vld_out : STD_LOGIC;
    signal src_axi0_V_id_V_0_ack_in : STD_LOGIC;
    signal src_axi0_V_id_V_0_ack_out : STD_LOGIC;
    signal src_axi0_V_id_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal src_axi0_V_id_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal src_axi0_V_id_V_0_sel_rd : STD_LOGIC := '0';
    signal src_axi0_V_id_V_0_sel_wr : STD_LOGIC := '0';
    signal src_axi0_V_id_V_0_sel : STD_LOGIC;
    signal src_axi0_V_id_V_0_load_A : STD_LOGIC;
    signal src_axi0_V_id_V_0_load_B : STD_LOGIC;
    signal src_axi0_V_id_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_axi0_V_id_V_0_state_cmp_full : STD_LOGIC;
    signal src_axi0_V_dest_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal src_axi0_V_dest_V_0_vld_in : STD_LOGIC;
    signal src_axi0_V_dest_V_0_vld_out : STD_LOGIC;
    signal src_axi0_V_dest_V_0_ack_in : STD_LOGIC;
    signal src_axi0_V_dest_V_0_ack_out : STD_LOGIC;
    signal src_axi0_V_dest_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal src_axi0_V_dest_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal src_axi0_V_dest_V_0_sel_rd : STD_LOGIC := '0';
    signal src_axi0_V_dest_V_0_sel_wr : STD_LOGIC := '0';
    signal src_axi0_V_dest_V_0_sel : STD_LOGIC;
    signal src_axi0_V_dest_V_0_load_A : STD_LOGIC;
    signal src_axi0_V_dest_V_0_load_B : STD_LOGIC;
    signal src_axi0_V_dest_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal src_axi0_V_dest_V_0_state_cmp_full : STD_LOGIC;
    signal imag_1_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln334_reg_533 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln334_reg_533_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal imag_1_data_stream_1_V_blk_n : STD_LOGIC;
    signal imag_1_data_stream_2_V_blk_n : STD_LOGIC;
    signal imagSrc_data_stream_0_V_blk_n : STD_LOGIC;
    signal imagSrc_data_stream_1_V_blk_n : STD_LOGIC;
    signal imagSrc_data_stream_2_V_blk_n : STD_LOGIC;
    signal t_V_1_reg_252 : STD_LOGIC_VECTOR (10 downto 0);
    signal op2_assign_reg_263 : STD_LOGIC_VECTOR (20 downto 0);
    signal i_V_fu_303_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_V_reg_486 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln887_1_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_1_reg_491 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln887_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_324_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal k_reg_500 : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_AXIvideo2Mat2_fu_273_ap_ready : STD_LOGIC;
    signal grp_AXIvideo2Mat2_fu_273_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal icmp_ln887_2_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal imag0_0_data_stream_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal imag0_0_data_stream_s_empty_n : STD_LOGIC;
    signal imag0_0_data_stream_s_read : STD_LOGIC;
    signal icmp_ln330_reg_529 : STD_LOGIC_VECTOR (0 downto 0);
    signal imag0_0_data_stream_1_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal imag0_0_data_stream_1_empty_n : STD_LOGIC;
    signal imag0_0_data_stream_1_read : STD_LOGIC;
    signal imag0_0_data_stream_2_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal imag0_0_data_stream_2_empty_n : STD_LOGIC;
    signal imag0_0_data_stream_2_read : STD_LOGIC;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_V_fu_336_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln330_fu_357_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln330_reg_519 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln324_fu_361_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal icmp_ln330_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln334_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_AXIvideo2Mat2_fu_273_ap_start : STD_LOGIC;
    signal grp_AXIvideo2Mat2_fu_273_ap_idle : STD_LOGIC;
    signal grp_AXIvideo2Mat2_fu_273_src_axi0_TVALID : STD_LOGIC;
    signal grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY : STD_LOGIC;
    signal grp_AXIvideo2Mat2_fu_273_img_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AXIvideo2Mat2_fu_273_img_data_stream_0_V_write : STD_LOGIC;
    signal grp_AXIvideo2Mat2_fu_273_img_data_stream_1_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AXIvideo2Mat2_fu_273_img_data_stream_1_V_write : STD_LOGIC;
    signal grp_AXIvideo2Mat2_fu_273_img_data_stream_2_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_AXIvideo2Mat2_fu_273_img_data_stream_2_V_write : STD_LOGIC;
    signal grp_AXIvideo2Mat2_fu_273_sof_read : STD_LOGIC;
    signal grp_AXIvideo2Mat2_fu_273_ap_return : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_reg_228 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal k_0_reg_240 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_AXIvideo2Mat2_fu_273_ap_start_reg : STD_LOGIC := '0';
    signal imag0_0_data_stream_s_full_n : STD_LOGIC;
    signal imag0_0_data_stream_s_write : STD_LOGIC;
    signal imag0_0_data_stream_1_full_n : STD_LOGIC;
    signal imag0_0_data_stream_1_write : STD_LOGIC;
    signal imag0_0_data_stream_2_full_n : STD_LOGIC;
    signal imag0_0_data_stream_2_write : STD_LOGIC;
    signal zext_ln330_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sof_1_fu_130 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_138 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_142 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mask2_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_342_p4 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln_fu_367_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln330_1_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln330_fu_378_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln330_fu_384_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln334_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln334_fu_402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component AXIvideo2Mat2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        src_axi0_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
        src_axi0_TVALID : IN STD_LOGIC;
        src_axi0_TREADY : OUT STD_LOGIC;
        src_axi0_TKEEP : IN STD_LOGIC_VECTOR (2 downto 0);
        src_axi0_TSTRB : IN STD_LOGIC_VECTOR (2 downto 0);
        src_axi0_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        src_axi0_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        src_axi0_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        src_axi0_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        img_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_0_V_full_n : IN STD_LOGIC;
        img_data_stream_0_V_write : OUT STD_LOGIC;
        img_data_stream_1_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_1_V_full_n : IN STD_LOGIC;
        img_data_stream_1_V_write : OUT STD_LOGIC;
        img_data_stream_2_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        img_data_stream_2_V_full_n : IN STD_LOGIC;
        img_data_stream_2_V_write : OUT STD_LOGIC;
        p_row : IN STD_LOGIC_VECTOR (10 downto 0);
        sof_read : IN STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w8_d1920_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    grp_AXIvideo2Mat2_fu_273 : component AXIvideo2Mat2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AXIvideo2Mat2_fu_273_ap_start,
        ap_done => grp_AXIvideo2Mat2_fu_273_ap_done,
        ap_idle => grp_AXIvideo2Mat2_fu_273_ap_idle,
        ap_ready => grp_AXIvideo2Mat2_fu_273_ap_ready,
        src_axi0_TDATA => src_axi0_V_data_V_0_data_out,
        src_axi0_TVALID => grp_AXIvideo2Mat2_fu_273_src_axi0_TVALID,
        src_axi0_TREADY => grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY,
        src_axi0_TKEEP => src_axi0_V_keep_V_0_data_out,
        src_axi0_TSTRB => src_axi0_V_strb_V_0_data_out,
        src_axi0_TUSER => src_axi0_V_user_V_0_data_out,
        src_axi0_TLAST => src_axi0_V_last_V_0_data_out,
        src_axi0_TID => src_axi0_V_id_V_0_data_out,
        src_axi0_TDEST => src_axi0_V_dest_V_0_data_out,
        img_data_stream_0_V_din => grp_AXIvideo2Mat2_fu_273_img_data_stream_0_V_din,
        img_data_stream_0_V_full_n => imag0_0_data_stream_s_full_n,
        img_data_stream_0_V_write => grp_AXIvideo2Mat2_fu_273_img_data_stream_0_V_write,
        img_data_stream_1_V_din => grp_AXIvideo2Mat2_fu_273_img_data_stream_1_V_din,
        img_data_stream_1_V_full_n => imag0_0_data_stream_1_full_n,
        img_data_stream_1_V_write => grp_AXIvideo2Mat2_fu_273_img_data_stream_1_V_write,
        img_data_stream_2_V_din => grp_AXIvideo2Mat2_fu_273_img_data_stream_2_V_din,
        img_data_stream_2_V_full_n => imag0_0_data_stream_2_full_n,
        img_data_stream_2_V_write => grp_AXIvideo2Mat2_fu_273_img_data_stream_2_V_write,
        p_row => t_V_reg_228,
        sof_read => grp_AXIvideo2Mat2_fu_273_sof_read,
        ap_return => grp_AXIvideo2Mat2_fu_273_ap_return);

    imag0_0_data_stream_s_fifo_U : component fifo_w8_d1920_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_AXIvideo2Mat2_fu_273_img_data_stream_0_V_din,
        if_full_n => imag0_0_data_stream_s_full_n,
        if_write => imag0_0_data_stream_s_write,
        if_dout => imag0_0_data_stream_s_dout,
        if_empty_n => imag0_0_data_stream_s_empty_n,
        if_read => imag0_0_data_stream_s_read);

    imag0_0_data_stream_1_fifo_U : component fifo_w8_d1920_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_AXIvideo2Mat2_fu_273_img_data_stream_1_V_din,
        if_full_n => imag0_0_data_stream_1_full_n,
        if_write => imag0_0_data_stream_1_write,
        if_dout => imag0_0_data_stream_1_dout,
        if_empty_n => imag0_0_data_stream_1_empty_n,
        if_read => imag0_0_data_stream_1_read);

    imag0_0_data_stream_2_fifo_U : component fifo_w8_d1920_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => grp_AXIvideo2Mat2_fu_273_img_data_stream_2_V_din,
        if_full_n => imag0_0_data_stream_2_full_n,
        if_write => imag0_0_data_stream_2_write,
        if_dout => imag0_0_data_stream_2_dout,
        if_empty_n => imag0_0_data_stream_2_empty_n,
        if_read => imag0_0_data_stream_2_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln887_fu_297_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state4);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_AXIvideo2Mat2_fu_273_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_AXIvideo2Mat2_fu_273_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln887_1_fu_309_p2 = ap_const_lv1_1) and (icmp_ln887_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_AXIvideo2Mat2_fu_273_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_AXIvideo2Mat2_fu_273_ap_ready = ap_const_logic_1)) then 
                    grp_AXIvideo2Mat2_fu_273_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_axi0_V_data_V_0_ack_out = ap_const_logic_1) and (src_axi0_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        src_axi0_V_data_V_0_sel_rd <= not(src_axi0_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_axi0_V_data_V_0_ack_in = ap_const_logic_1) and (src_axi0_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        src_axi0_V_data_V_0_sel_wr <= not(src_axi0_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_axi0_V_data_V_0_state = ap_const_lv2_2) and (src_axi0_V_data_V_0_vld_in = ap_const_logic_0)) or ((src_axi0_V_data_V_0_state = ap_const_lv2_3) and (src_axi0_V_data_V_0_vld_in = ap_const_logic_0) and (src_axi0_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    src_axi0_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((src_axi0_V_data_V_0_state = ap_const_lv2_1) and (src_axi0_V_data_V_0_ack_out = ap_const_logic_0)) or ((src_axi0_V_data_V_0_state = ap_const_lv2_3) and (src_axi0_V_data_V_0_ack_out = ap_const_logic_0) and (src_axi0_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    src_axi0_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_axi0_V_data_V_0_vld_in = ap_const_logic_0) and (src_axi0_V_data_V_0_ack_out = ap_const_logic_1))) and not(((src_axi0_V_data_V_0_ack_out = ap_const_logic_0) and (src_axi0_V_data_V_0_vld_in = ap_const_logic_1))) and (src_axi0_V_data_V_0_state = ap_const_lv2_3)) or ((src_axi0_V_data_V_0_state = ap_const_lv2_1) and (src_axi0_V_data_V_0_ack_out = ap_const_logic_1)) or ((src_axi0_V_data_V_0_state = ap_const_lv2_2) and (src_axi0_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    src_axi0_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    src_axi0_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_dest_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_dest_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_axi0_V_dest_V_0_ack_out = ap_const_logic_1) and (src_axi0_V_dest_V_0_vld_out = ap_const_logic_1))) then 
                                        src_axi0_V_dest_V_0_sel_rd <= not(src_axi0_V_dest_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_dest_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_dest_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_axi0_V_dest_V_0_ack_in = ap_const_logic_1) and (src_axi0_V_dest_V_0_vld_in = ap_const_logic_1))) then 
                                        src_axi0_V_dest_V_0_sel_wr <= not(src_axi0_V_dest_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_dest_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_dest_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_axi0_V_dest_V_0_state = ap_const_lv2_2) and (src_axi0_V_dest_V_0_vld_in = ap_const_logic_0)) or ((src_axi0_V_dest_V_0_state = ap_const_lv2_3) and (src_axi0_V_dest_V_0_vld_in = ap_const_logic_0) and (src_axi0_V_dest_V_0_ack_out = ap_const_logic_1)))) then 
                    src_axi0_V_dest_V_0_state <= ap_const_lv2_2;
                elsif ((((src_axi0_V_dest_V_0_state = ap_const_lv2_1) and (src_axi0_V_dest_V_0_ack_out = ap_const_logic_0)) or ((src_axi0_V_dest_V_0_state = ap_const_lv2_3) and (src_axi0_V_dest_V_0_ack_out = ap_const_logic_0) and (src_axi0_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    src_axi0_V_dest_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_axi0_V_dest_V_0_vld_in = ap_const_logic_0) and (src_axi0_V_dest_V_0_ack_out = ap_const_logic_1))) and not(((src_axi0_V_dest_V_0_ack_out = ap_const_logic_0) and (src_axi0_V_dest_V_0_vld_in = ap_const_logic_1))) and (src_axi0_V_dest_V_0_state = ap_const_lv2_3)) or ((src_axi0_V_dest_V_0_state = ap_const_lv2_1) and (src_axi0_V_dest_V_0_ack_out = ap_const_logic_1)) or ((src_axi0_V_dest_V_0_state = ap_const_lv2_2) and (src_axi0_V_dest_V_0_vld_in = ap_const_logic_1)))) then 
                    src_axi0_V_dest_V_0_state <= ap_const_lv2_3;
                else 
                    src_axi0_V_dest_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_id_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_id_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_axi0_V_id_V_0_ack_out = ap_const_logic_1) and (src_axi0_V_id_V_0_vld_out = ap_const_logic_1))) then 
                                        src_axi0_V_id_V_0_sel_rd <= not(src_axi0_V_id_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_id_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_id_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_axi0_V_id_V_0_ack_in = ap_const_logic_1) and (src_axi0_V_id_V_0_vld_in = ap_const_logic_1))) then 
                                        src_axi0_V_id_V_0_sel_wr <= not(src_axi0_V_id_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_id_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_id_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_axi0_V_id_V_0_state = ap_const_lv2_2) and (src_axi0_V_id_V_0_vld_in = ap_const_logic_0)) or ((src_axi0_V_id_V_0_state = ap_const_lv2_3) and (src_axi0_V_id_V_0_vld_in = ap_const_logic_0) and (src_axi0_V_id_V_0_ack_out = ap_const_logic_1)))) then 
                    src_axi0_V_id_V_0_state <= ap_const_lv2_2;
                elsif ((((src_axi0_V_id_V_0_state = ap_const_lv2_1) and (src_axi0_V_id_V_0_ack_out = ap_const_logic_0)) or ((src_axi0_V_id_V_0_state = ap_const_lv2_3) and (src_axi0_V_id_V_0_ack_out = ap_const_logic_0) and (src_axi0_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    src_axi0_V_id_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_axi0_V_id_V_0_vld_in = ap_const_logic_0) and (src_axi0_V_id_V_0_ack_out = ap_const_logic_1))) and not(((src_axi0_V_id_V_0_ack_out = ap_const_logic_0) and (src_axi0_V_id_V_0_vld_in = ap_const_logic_1))) and (src_axi0_V_id_V_0_state = ap_const_lv2_3)) or ((src_axi0_V_id_V_0_state = ap_const_lv2_1) and (src_axi0_V_id_V_0_ack_out = ap_const_logic_1)) or ((src_axi0_V_id_V_0_state = ap_const_lv2_2) and (src_axi0_V_id_V_0_vld_in = ap_const_logic_1)))) then 
                    src_axi0_V_id_V_0_state <= ap_const_lv2_3;
                else 
                    src_axi0_V_id_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_axi0_V_keep_V_0_ack_out = ap_const_logic_1) and (src_axi0_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        src_axi0_V_keep_V_0_sel_rd <= not(src_axi0_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_axi0_V_keep_V_0_ack_in = ap_const_logic_1) and (src_axi0_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        src_axi0_V_keep_V_0_sel_wr <= not(src_axi0_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_axi0_V_keep_V_0_state = ap_const_lv2_2) and (src_axi0_V_keep_V_0_vld_in = ap_const_logic_0)) or ((src_axi0_V_keep_V_0_state = ap_const_lv2_3) and (src_axi0_V_keep_V_0_vld_in = ap_const_logic_0) and (src_axi0_V_keep_V_0_ack_out = ap_const_logic_1)))) then 
                    src_axi0_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((src_axi0_V_keep_V_0_state = ap_const_lv2_1) and (src_axi0_V_keep_V_0_ack_out = ap_const_logic_0)) or ((src_axi0_V_keep_V_0_state = ap_const_lv2_3) and (src_axi0_V_keep_V_0_ack_out = ap_const_logic_0) and (src_axi0_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    src_axi0_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_axi0_V_keep_V_0_vld_in = ap_const_logic_0) and (src_axi0_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((src_axi0_V_keep_V_0_ack_out = ap_const_logic_0) and (src_axi0_V_keep_V_0_vld_in = ap_const_logic_1))) and (src_axi0_V_keep_V_0_state = ap_const_lv2_3)) or ((src_axi0_V_keep_V_0_state = ap_const_lv2_1) and (src_axi0_V_keep_V_0_ack_out = ap_const_logic_1)) or ((src_axi0_V_keep_V_0_state = ap_const_lv2_2) and (src_axi0_V_keep_V_0_vld_in = ap_const_logic_1)))) then 
                    src_axi0_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    src_axi0_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_axi0_V_last_V_0_ack_out = ap_const_logic_1) and (src_axi0_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        src_axi0_V_last_V_0_sel_rd <= not(src_axi0_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_axi0_V_last_V_0_ack_in = ap_const_logic_1) and (src_axi0_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        src_axi0_V_last_V_0_sel_wr <= not(src_axi0_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_axi0_V_last_V_0_state = ap_const_lv2_2) and (src_axi0_V_last_V_0_vld_in = ap_const_logic_0)) or ((src_axi0_V_last_V_0_state = ap_const_lv2_3) and (src_axi0_V_last_V_0_vld_in = ap_const_logic_0) and (src_axi0_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    src_axi0_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((src_axi0_V_last_V_0_state = ap_const_lv2_1) and (src_axi0_V_last_V_0_ack_out = ap_const_logic_0)) or ((src_axi0_V_last_V_0_state = ap_const_lv2_3) and (src_axi0_V_last_V_0_ack_out = ap_const_logic_0) and (src_axi0_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    src_axi0_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_axi0_V_last_V_0_vld_in = ap_const_logic_0) and (src_axi0_V_last_V_0_ack_out = ap_const_logic_1))) and not(((src_axi0_V_last_V_0_ack_out = ap_const_logic_0) and (src_axi0_V_last_V_0_vld_in = ap_const_logic_1))) and (src_axi0_V_last_V_0_state = ap_const_lv2_3)) or ((src_axi0_V_last_V_0_state = ap_const_lv2_1) and (src_axi0_V_last_V_0_ack_out = ap_const_logic_1)) or ((src_axi0_V_last_V_0_state = ap_const_lv2_2) and (src_axi0_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    src_axi0_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    src_axi0_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_strb_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_strb_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_axi0_V_strb_V_0_ack_out = ap_const_logic_1) and (src_axi0_V_strb_V_0_vld_out = ap_const_logic_1))) then 
                                        src_axi0_V_strb_V_0_sel_rd <= not(src_axi0_V_strb_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_strb_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_strb_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_axi0_V_strb_V_0_ack_in = ap_const_logic_1) and (src_axi0_V_strb_V_0_vld_in = ap_const_logic_1))) then 
                                        src_axi0_V_strb_V_0_sel_wr <= not(src_axi0_V_strb_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_strb_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_strb_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_axi0_V_strb_V_0_state = ap_const_lv2_2) and (src_axi0_V_strb_V_0_vld_in = ap_const_logic_0)) or ((src_axi0_V_strb_V_0_state = ap_const_lv2_3) and (src_axi0_V_strb_V_0_vld_in = ap_const_logic_0) and (src_axi0_V_strb_V_0_ack_out = ap_const_logic_1)))) then 
                    src_axi0_V_strb_V_0_state <= ap_const_lv2_2;
                elsif ((((src_axi0_V_strb_V_0_state = ap_const_lv2_1) and (src_axi0_V_strb_V_0_ack_out = ap_const_logic_0)) or ((src_axi0_V_strb_V_0_state = ap_const_lv2_3) and (src_axi0_V_strb_V_0_ack_out = ap_const_logic_0) and (src_axi0_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    src_axi0_V_strb_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_axi0_V_strb_V_0_vld_in = ap_const_logic_0) and (src_axi0_V_strb_V_0_ack_out = ap_const_logic_1))) and not(((src_axi0_V_strb_V_0_ack_out = ap_const_logic_0) and (src_axi0_V_strb_V_0_vld_in = ap_const_logic_1))) and (src_axi0_V_strb_V_0_state = ap_const_lv2_3)) or ((src_axi0_V_strb_V_0_state = ap_const_lv2_1) and (src_axi0_V_strb_V_0_ack_out = ap_const_logic_1)) or ((src_axi0_V_strb_V_0_state = ap_const_lv2_2) and (src_axi0_V_strb_V_0_vld_in = ap_const_logic_1)))) then 
                    src_axi0_V_strb_V_0_state <= ap_const_lv2_3;
                else 
                    src_axi0_V_strb_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((src_axi0_V_user_V_0_ack_out = ap_const_logic_1) and (src_axi0_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        src_axi0_V_user_V_0_sel_rd <= not(src_axi0_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((src_axi0_V_user_V_0_ack_in = ap_const_logic_1) and (src_axi0_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        src_axi0_V_user_V_0_sel_wr <= not(src_axi0_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    src_axi0_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                src_axi0_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((src_axi0_V_user_V_0_state = ap_const_lv2_2) and (src_axi0_V_user_V_0_vld_in = ap_const_logic_0)) or ((src_axi0_V_user_V_0_state = ap_const_lv2_3) and (src_axi0_V_user_V_0_vld_in = ap_const_logic_0) and (src_axi0_V_user_V_0_ack_out = ap_const_logic_1)))) then 
                    src_axi0_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((src_axi0_V_user_V_0_state = ap_const_lv2_1) and (src_axi0_V_user_V_0_ack_out = ap_const_logic_0)) or ((src_axi0_V_user_V_0_state = ap_const_lv2_3) and (src_axi0_V_user_V_0_ack_out = ap_const_logic_0) and (src_axi0_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    src_axi0_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((src_axi0_V_user_V_0_vld_in = ap_const_logic_0) and (src_axi0_V_user_V_0_ack_out = ap_const_logic_1))) and not(((src_axi0_V_user_V_0_ack_out = ap_const_logic_0) and (src_axi0_V_user_V_0_vld_in = ap_const_logic_1))) and (src_axi0_V_user_V_0_state = ap_const_lv2_3)) or ((src_axi0_V_user_V_0_state = ap_const_lv2_1) and (src_axi0_V_user_V_0_ack_out = ap_const_logic_1)) or ((src_axi0_V_user_V_0_state = ap_const_lv2_2) and (src_axi0_V_user_V_0_vld_in = ap_const_logic_1)))) then 
                    src_axi0_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    src_axi0_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    k_0_reg_240_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                k_0_reg_240 <= k_reg_500;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_0_reg_240 <= ap_const_lv21_0;
            end if; 
        end if;
    end process;

    op2_assign_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_2_fu_330_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                op2_assign_reg_263 <= add_ln324_fu_361_p2;
            elsif (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                op2_assign_reg_263 <= k_0_reg_240;
            end if; 
        end if;
    end process;

    t_V_1_reg_252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_2_fu_330_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                t_V_1_reg_252 <= j_V_fu_336_p2;
            elsif (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                t_V_1_reg_252 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    t_V_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                t_V_reg_228 <= i_V_reg_486;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_228 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_486 <= i_V_fu_303_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln330_reg_529 <= icmp_ln330_fu_390_p2;
                icmp_ln334_reg_533 <= icmp_ln334_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln334_reg_533_pp0_iter2_reg <= icmp_ln334_reg_533;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_fu_297_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln887_1_reg_491 <= icmp_ln887_1_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                k_reg_500 <= k_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_1_reg_491 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                sof_1_fu_130 <= grp_AXIvideo2Mat2_fu_273_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_axi0_V_data_V_0_load_A = ap_const_logic_1)) then
                src_axi0_V_data_V_0_payload_A <= src_axi0_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_axi0_V_data_V_0_load_B = ap_const_logic_1)) then
                src_axi0_V_data_V_0_payload_B <= src_axi0_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_axi0_V_dest_V_0_load_A = ap_const_logic_1)) then
                src_axi0_V_dest_V_0_payload_A <= src_axi0_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_axi0_V_dest_V_0_load_B = ap_const_logic_1)) then
                src_axi0_V_dest_V_0_payload_B <= src_axi0_TDEST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_axi0_V_id_V_0_load_A = ap_const_logic_1)) then
                src_axi0_V_id_V_0_payload_A <= src_axi0_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_axi0_V_id_V_0_load_B = ap_const_logic_1)) then
                src_axi0_V_id_V_0_payload_B <= src_axi0_TID;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_axi0_V_keep_V_0_load_A = ap_const_logic_1)) then
                src_axi0_V_keep_V_0_payload_A <= src_axi0_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_axi0_V_keep_V_0_load_B = ap_const_logic_1)) then
                src_axi0_V_keep_V_0_payload_B <= src_axi0_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_axi0_V_last_V_0_load_A = ap_const_logic_1)) then
                src_axi0_V_last_V_0_payload_A <= src_axi0_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_axi0_V_last_V_0_load_B = ap_const_logic_1)) then
                src_axi0_V_last_V_0_payload_B <= src_axi0_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_axi0_V_strb_V_0_load_A = ap_const_logic_1)) then
                src_axi0_V_strb_V_0_payload_A <= src_axi0_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_axi0_V_strb_V_0_load_B = ap_const_logic_1)) then
                src_axi0_V_strb_V_0_payload_B <= src_axi0_TSTRB;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_axi0_V_user_V_0_load_A = ap_const_logic_1)) then
                src_axi0_V_user_V_0_payload_A <= src_axi0_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((src_axi0_V_user_V_0_load_B = ap_const_logic_1)) then
                src_axi0_V_user_V_0_payload_B <= src_axi0_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln330_reg_529 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                tmp_10_fu_142 <= imag0_0_data_stream_s_dout;
                tmp_9_fu_138 <= imag0_0_data_stream_1_dout;
                tmp_fu_134 <= imag0_0_data_stream_2_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln887_2_fu_330_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln330_reg_519 <= trunc_ln330_fu_357_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter3, ap_CS_fsm_state2, icmp_ln887_fu_297_p2, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, icmp_ln887_2_fu_330_p2, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln887_fu_297_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln887_2_fu_330_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln887_2_fu_330_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln324_fu_361_p2 <= std_logic_vector(unsigned(op2_assign_reg_263) + unsigned(ap_const_lv21_1));
    and_ln330_fu_384_p2 <= (shl_ln330_fu_378_p2 and mask2_Dout_A);
    and_ln334_fu_402_p2 <= (shl_ln334_fu_396_p2 and mask2_Dout_A);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(imag_1_data_stream_0_V_full_n, imag_1_data_stream_1_V_full_n, imag_1_data_stream_2_V_full_n, imagSrc_data_stream_0_V_empty_n, imagSrc_data_stream_1_V_empty_n, imagSrc_data_stream_2_V_empty_n, ap_enable_reg_pp0_iter3, icmp_ln334_reg_533_pp0_iter2_reg, imag0_0_data_stream_s_empty_n, icmp_ln330_reg_529, imag0_0_data_stream_1_empty_n, imag0_0_data_stream_2_empty_n, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((icmp_ln330_reg_529 = ap_const_lv1_0) and (imag0_0_data_stream_2_empty_n = ap_const_logic_0)) or ((icmp_ln330_reg_529 = ap_const_lv1_0) and (imag0_0_data_stream_1_empty_n = ap_const_logic_0)) or ((icmp_ln330_reg_529 = ap_const_lv1_0) and (imag0_0_data_stream_s_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((imagSrc_data_stream_2_V_empty_n = ap_const_logic_0) or (imagSrc_data_stream_1_V_empty_n = ap_const_logic_0) or (imagSrc_data_stream_0_V_empty_n = ap_const_logic_0) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (imag_1_data_stream_2_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (imag_1_data_stream_1_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (imag_1_data_stream_0_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (imag_1_data_stream_2_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (imag_1_data_stream_1_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (imag_1_data_stream_0_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(imag_1_data_stream_0_V_full_n, imag_1_data_stream_1_V_full_n, imag_1_data_stream_2_V_full_n, imagSrc_data_stream_0_V_empty_n, imagSrc_data_stream_1_V_empty_n, imagSrc_data_stream_2_V_empty_n, ap_enable_reg_pp0_iter3, icmp_ln334_reg_533_pp0_iter2_reg, imag0_0_data_stream_s_empty_n, icmp_ln330_reg_529, imag0_0_data_stream_1_empty_n, imag0_0_data_stream_2_empty_n, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((icmp_ln330_reg_529 = ap_const_lv1_0) and (imag0_0_data_stream_2_empty_n = ap_const_logic_0)) or ((icmp_ln330_reg_529 = ap_const_lv1_0) and (imag0_0_data_stream_1_empty_n = ap_const_logic_0)) or ((icmp_ln330_reg_529 = ap_const_lv1_0) and (imag0_0_data_stream_s_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((imagSrc_data_stream_2_V_empty_n = ap_const_logic_0) or (imagSrc_data_stream_1_V_empty_n = ap_const_logic_0) or (imagSrc_data_stream_0_V_empty_n = ap_const_logic_0) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (imag_1_data_stream_2_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (imag_1_data_stream_1_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (imag_1_data_stream_0_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (imag_1_data_stream_2_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (imag_1_data_stream_1_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (imag_1_data_stream_0_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(imag_1_data_stream_0_V_full_n, imag_1_data_stream_1_V_full_n, imag_1_data_stream_2_V_full_n, imagSrc_data_stream_0_V_empty_n, imagSrc_data_stream_1_V_empty_n, imagSrc_data_stream_2_V_empty_n, ap_enable_reg_pp0_iter3, icmp_ln334_reg_533_pp0_iter2_reg, imag0_0_data_stream_s_empty_n, icmp_ln330_reg_529, imag0_0_data_stream_1_empty_n, imag0_0_data_stream_2_empty_n, ap_enable_reg_pp0_iter2)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (((icmp_ln330_reg_529 = ap_const_lv1_0) and (imag0_0_data_stream_2_empty_n = ap_const_logic_0)) or ((icmp_ln330_reg_529 = ap_const_lv1_0) and (imag0_0_data_stream_1_empty_n = ap_const_logic_0)) or ((icmp_ln330_reg_529 = ap_const_lv1_0) and (imag0_0_data_stream_s_empty_n = ap_const_logic_0)))) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and ((imagSrc_data_stream_2_V_empty_n = ap_const_logic_0) or (imagSrc_data_stream_1_V_empty_n = ap_const_logic_0) or (imagSrc_data_stream_0_V_empty_n = ap_const_logic_0) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (imag_1_data_stream_2_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (imag_1_data_stream_1_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (imag_1_data_stream_0_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (imag_1_data_stream_2_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (imag_1_data_stream_1_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (imag_1_data_stream_0_V_full_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(icmp_ln887_1_reg_491, grp_AXIvideo2Mat2_fu_273_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((icmp_ln887_1_reg_491 = ap_const_lv1_1) and (grp_AXIvideo2Mat2_fu_273_ap_done = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_pp0_stage0_iter2_assign_proc : process(imag0_0_data_stream_s_empty_n, icmp_ln330_reg_529, imag0_0_data_stream_1_empty_n, imag0_0_data_stream_2_empty_n)
    begin
                ap_block_state6_pp0_stage0_iter2 <= (((icmp_ln330_reg_529 = ap_const_lv1_0) and (imag0_0_data_stream_2_empty_n = ap_const_logic_0)) or ((icmp_ln330_reg_529 = ap_const_lv1_0) and (imag0_0_data_stream_1_empty_n = ap_const_logic_0)) or ((icmp_ln330_reg_529 = ap_const_lv1_0) and (imag0_0_data_stream_s_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state7_pp0_stage0_iter3_assign_proc : process(imag_1_data_stream_0_V_full_n, imag_1_data_stream_1_V_full_n, imag_1_data_stream_2_V_full_n, imagSrc_data_stream_0_V_empty_n, imagSrc_data_stream_1_V_empty_n, imagSrc_data_stream_2_V_empty_n, icmp_ln334_reg_533_pp0_iter2_reg)
    begin
                ap_block_state7_pp0_stage0_iter3 <= ((imagSrc_data_stream_2_V_empty_n = ap_const_logic_0) or (imagSrc_data_stream_1_V_empty_n = ap_const_logic_0) or (imagSrc_data_stream_0_V_empty_n = ap_const_logic_0) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (imag_1_data_stream_2_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (imag_1_data_stream_1_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (imag_1_data_stream_0_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (imag_1_data_stream_2_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (imag_1_data_stream_1_V_full_n = ap_const_logic_0)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (imag_1_data_stream_0_V_full_n = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln887_2_fu_330_p2)
    begin
        if ((icmp_ln887_2_fu_330_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state2, icmp_ln887_fu_297_p2)
    begin
        if (((icmp_ln887_fu_297_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    grp_AXIvideo2Mat2_fu_273_ap_start <= grp_AXIvideo2Mat2_fu_273_ap_start_reg;
    grp_AXIvideo2Mat2_fu_273_sof_read <= sof_1_fu_130(0);
    grp_AXIvideo2Mat2_fu_273_src_axi0_TVALID <= src_axi0_V_dest_V_0_state(0);
    i_V_fu_303_p2 <= std_logic_vector(unsigned(t_V_reg_228) + unsigned(ap_const_lv11_1));
    icmp_ln330_fu_390_p2 <= "1" when (and_ln330_fu_384_p2 = ap_const_lv32_0) else "0";
    icmp_ln334_fu_408_p2 <= "1" when (and_ln334_fu_402_p2 = ap_const_lv32_0) else "0";
    icmp_ln887_1_fu_309_p2 <= "1" when (unsigned(t_V_reg_228) < unsigned(ap_const_lv11_1E0)) else "0";
    icmp_ln887_2_fu_330_p2 <= "1" when (t_V_1_reg_252 = ap_const_lv11_780) else "0";
    icmp_ln887_fu_297_p2 <= "1" when (t_V_reg_228 = ap_const_lv11_438) else "0";

    imag0_0_data_stream_1_read_assign_proc : process(icmp_ln330_reg_529, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln330_reg_529 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            imag0_0_data_stream_1_read <= ap_const_logic_1;
        else 
            imag0_0_data_stream_1_read <= ap_const_logic_0;
        end if; 
    end process;


    imag0_0_data_stream_1_write_assign_proc : process(icmp_ln887_1_reg_491, ap_CS_fsm_state3, grp_AXIvideo2Mat2_fu_273_img_data_stream_1_V_write)
    begin
        if (((icmp_ln887_1_reg_491 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            imag0_0_data_stream_1_write <= grp_AXIvideo2Mat2_fu_273_img_data_stream_1_V_write;
        else 
            imag0_0_data_stream_1_write <= ap_const_logic_0;
        end if; 
    end process;


    imag0_0_data_stream_2_read_assign_proc : process(icmp_ln330_reg_529, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln330_reg_529 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            imag0_0_data_stream_2_read <= ap_const_logic_1;
        else 
            imag0_0_data_stream_2_read <= ap_const_logic_0;
        end if; 
    end process;


    imag0_0_data_stream_2_write_assign_proc : process(icmp_ln887_1_reg_491, ap_CS_fsm_state3, grp_AXIvideo2Mat2_fu_273_img_data_stream_2_V_write)
    begin
        if (((icmp_ln887_1_reg_491 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            imag0_0_data_stream_2_write <= grp_AXIvideo2Mat2_fu_273_img_data_stream_2_V_write;
        else 
            imag0_0_data_stream_2_write <= ap_const_logic_0;
        end if; 
    end process;


    imag0_0_data_stream_s_read_assign_proc : process(icmp_ln330_reg_529, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln330_reg_529 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            imag0_0_data_stream_s_read <= ap_const_logic_1;
        else 
            imag0_0_data_stream_s_read <= ap_const_logic_0;
        end if; 
    end process;


    imag0_0_data_stream_s_write_assign_proc : process(icmp_ln887_1_reg_491, ap_CS_fsm_state3, grp_AXIvideo2Mat2_fu_273_img_data_stream_0_V_write)
    begin
        if (((icmp_ln887_1_reg_491 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            imag0_0_data_stream_s_write <= grp_AXIvideo2Mat2_fu_273_img_data_stream_0_V_write;
        else 
            imag0_0_data_stream_s_write <= ap_const_logic_0;
        end if; 
    end process;


    imagSrc_data_stream_0_V_blk_n_assign_proc : process(imagSrc_data_stream_0_V_empty_n, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            imagSrc_data_stream_0_V_blk_n <= imagSrc_data_stream_0_V_empty_n;
        else 
            imagSrc_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imagSrc_data_stream_0_V_read_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            imagSrc_data_stream_0_V_read <= ap_const_logic_1;
        else 
            imagSrc_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    imagSrc_data_stream_1_V_blk_n_assign_proc : process(imagSrc_data_stream_1_V_empty_n, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            imagSrc_data_stream_1_V_blk_n <= imagSrc_data_stream_1_V_empty_n;
        else 
            imagSrc_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imagSrc_data_stream_1_V_read_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            imagSrc_data_stream_1_V_read <= ap_const_logic_1;
        else 
            imagSrc_data_stream_1_V_read <= ap_const_logic_0;
        end if; 
    end process;


    imagSrc_data_stream_2_V_blk_n_assign_proc : process(imagSrc_data_stream_2_V_empty_n, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            imagSrc_data_stream_2_V_blk_n <= imagSrc_data_stream_2_V_empty_n;
        else 
            imagSrc_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imagSrc_data_stream_2_V_read_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            imagSrc_data_stream_2_V_read <= ap_const_logic_1;
        else 
            imagSrc_data_stream_2_V_read <= ap_const_logic_0;
        end if; 
    end process;


    imag_1_data_stream_0_V_blk_n_assign_proc : process(imag_1_data_stream_0_V_full_n, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, icmp_ln334_reg_533_pp0_iter2_reg)
    begin
        if ((((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            imag_1_data_stream_0_V_blk_n <= imag_1_data_stream_0_V_full_n;
        else 
            imag_1_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imag_1_data_stream_0_V_din_assign_proc : process(imagSrc_data_stream_0_V_dout, ap_enable_reg_pp0_iter3, icmp_ln334_reg_533_pp0_iter2_reg, tmp_10_fu_142, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
            if ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1)) then 
                imag_1_data_stream_0_V_din <= imagSrc_data_stream_0_V_dout;
            elsif ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0)) then 
                imag_1_data_stream_0_V_din <= tmp_10_fu_142;
            else 
                imag_1_data_stream_0_V_din <= "XXXXXXXX";
            end if;
        else 
            imag_1_data_stream_0_V_din <= "XXXXXXXX";
        end if; 
    end process;


    imag_1_data_stream_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln334_reg_533_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            imag_1_data_stream_0_V_write <= ap_const_logic_1;
        else 
            imag_1_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    imag_1_data_stream_1_V_blk_n_assign_proc : process(imag_1_data_stream_1_V_full_n, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, icmp_ln334_reg_533_pp0_iter2_reg)
    begin
        if ((((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            imag_1_data_stream_1_V_blk_n <= imag_1_data_stream_1_V_full_n;
        else 
            imag_1_data_stream_1_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imag_1_data_stream_1_V_din_assign_proc : process(imagSrc_data_stream_1_V_dout, ap_enable_reg_pp0_iter3, icmp_ln334_reg_533_pp0_iter2_reg, tmp_9_fu_138, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
            if ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1)) then 
                imag_1_data_stream_1_V_din <= imagSrc_data_stream_1_V_dout;
            elsif ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0)) then 
                imag_1_data_stream_1_V_din <= tmp_9_fu_138;
            else 
                imag_1_data_stream_1_V_din <= "XXXXXXXX";
            end if;
        else 
            imag_1_data_stream_1_V_din <= "XXXXXXXX";
        end if; 
    end process;


    imag_1_data_stream_1_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln334_reg_533_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            imag_1_data_stream_1_V_write <= ap_const_logic_1;
        else 
            imag_1_data_stream_1_V_write <= ap_const_logic_0;
        end if; 
    end process;


    imag_1_data_stream_2_V_blk_n_assign_proc : process(imag_1_data_stream_2_V_full_n, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, icmp_ln334_reg_533_pp0_iter2_reg)
    begin
        if ((((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            imag_1_data_stream_2_V_blk_n <= imag_1_data_stream_2_V_full_n;
        else 
            imag_1_data_stream_2_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    imag_1_data_stream_2_V_din_assign_proc : process(imagSrc_data_stream_2_V_dout, ap_enable_reg_pp0_iter3, icmp_ln334_reg_533_pp0_iter2_reg, tmp_fu_134, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
            if ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1)) then 
                imag_1_data_stream_2_V_din <= imagSrc_data_stream_2_V_dout;
            elsif ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0)) then 
                imag_1_data_stream_2_V_din <= tmp_fu_134;
            else 
                imag_1_data_stream_2_V_din <= "XXXXXXXX";
            end if;
        else 
            imag_1_data_stream_2_V_din <= "XXXXXXXX";
        end if; 
    end process;


    imag_1_data_stream_2_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, icmp_ln334_reg_533_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if ((((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((icmp_ln334_reg_533_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            imag_1_data_stream_2_V_write <= ap_const_logic_1;
        else 
            imag_1_data_stream_2_V_write <= ap_const_logic_0;
        end if; 
    end process;


    internal_ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln887_fu_297_p2)
    begin
        if (((icmp_ln887_fu_297_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    j_V_fu_336_p2 <= std_logic_vector(unsigned(t_V_1_reg_252) + unsigned(ap_const_lv11_1));
    k_fu_324_p2 <= std_logic_vector(unsigned(k_0_reg_240) + unsigned(ap_const_lv21_780));
    lshr_ln_fu_342_p4 <= op2_assign_reg_263(20 downto 4);
    mask2_Addr_A <= std_logic_vector(shift_left(unsigned(mask2_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    mask2_Addr_A_orig <= zext_ln330_fu_352_p1(32 - 1 downto 0);
    mask2_Din_A <= ap_const_lv32_0;

    mask2_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mask2_EN_A <= ap_const_logic_1;
        else 
            mask2_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    mask2_WEN_A <= ap_const_lv4_0;

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    shl_ln330_fu_378_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_3),to_integer(unsigned('0' & zext_ln330_1_fu_374_p1(31-1 downto 0)))));
    shl_ln334_fu_396_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_2),to_integer(unsigned('0' & zext_ln330_1_fu_374_p1(31-1 downto 0)))));
    shl_ln_fu_367_p3 <= (trunc_ln330_reg_519 & ap_const_lv1_0);
    src_axi0_TREADY <= src_axi0_V_dest_V_0_state(1);
    src_axi0_V_data_V_0_ack_in <= src_axi0_V_data_V_0_state(1);

    src_axi0_V_data_V_0_ack_out_assign_proc : process(icmp_ln887_1_reg_491, ap_CS_fsm_state3, grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY)
    begin
        if (((icmp_ln887_1_reg_491 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_axi0_V_data_V_0_ack_out <= grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY;
        else 
            src_axi0_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_axi0_V_data_V_0_data_out_assign_proc : process(src_axi0_V_data_V_0_payload_A, src_axi0_V_data_V_0_payload_B, src_axi0_V_data_V_0_sel)
    begin
        if ((src_axi0_V_data_V_0_sel = ap_const_logic_1)) then 
            src_axi0_V_data_V_0_data_out <= src_axi0_V_data_V_0_payload_B;
        else 
            src_axi0_V_data_V_0_data_out <= src_axi0_V_data_V_0_payload_A;
        end if; 
    end process;

    src_axi0_V_data_V_0_load_A <= (src_axi0_V_data_V_0_state_cmp_full and not(src_axi0_V_data_V_0_sel_wr));
    src_axi0_V_data_V_0_load_B <= (src_axi0_V_data_V_0_state_cmp_full and src_axi0_V_data_V_0_sel_wr);
    src_axi0_V_data_V_0_sel <= src_axi0_V_data_V_0_sel_rd;
    src_axi0_V_data_V_0_state_cmp_full <= '0' when (src_axi0_V_data_V_0_state = ap_const_lv2_1) else '1';
    src_axi0_V_data_V_0_vld_in <= src_axi0_TVALID;
    src_axi0_V_data_V_0_vld_out <= src_axi0_V_data_V_0_state(0);
    src_axi0_V_dest_V_0_ack_in <= src_axi0_V_dest_V_0_state(1);

    src_axi0_V_dest_V_0_ack_out_assign_proc : process(icmp_ln887_1_reg_491, ap_CS_fsm_state3, grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY)
    begin
        if (((icmp_ln887_1_reg_491 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_axi0_V_dest_V_0_ack_out <= grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY;
        else 
            src_axi0_V_dest_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_axi0_V_dest_V_0_data_out_assign_proc : process(src_axi0_V_dest_V_0_payload_A, src_axi0_V_dest_V_0_payload_B, src_axi0_V_dest_V_0_sel)
    begin
        if ((src_axi0_V_dest_V_0_sel = ap_const_logic_1)) then 
            src_axi0_V_dest_V_0_data_out <= src_axi0_V_dest_V_0_payload_B;
        else 
            src_axi0_V_dest_V_0_data_out <= src_axi0_V_dest_V_0_payload_A;
        end if; 
    end process;

    src_axi0_V_dest_V_0_load_A <= (src_axi0_V_dest_V_0_state_cmp_full and not(src_axi0_V_dest_V_0_sel_wr));
    src_axi0_V_dest_V_0_load_B <= (src_axi0_V_dest_V_0_state_cmp_full and src_axi0_V_dest_V_0_sel_wr);
    src_axi0_V_dest_V_0_sel <= src_axi0_V_dest_V_0_sel_rd;
    src_axi0_V_dest_V_0_state_cmp_full <= '0' when (src_axi0_V_dest_V_0_state = ap_const_lv2_1) else '1';
    src_axi0_V_dest_V_0_vld_in <= src_axi0_TVALID;
    src_axi0_V_dest_V_0_vld_out <= src_axi0_V_dest_V_0_state(0);
    src_axi0_V_id_V_0_ack_in <= src_axi0_V_id_V_0_state(1);

    src_axi0_V_id_V_0_ack_out_assign_proc : process(icmp_ln887_1_reg_491, ap_CS_fsm_state3, grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY)
    begin
        if (((icmp_ln887_1_reg_491 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_axi0_V_id_V_0_ack_out <= grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY;
        else 
            src_axi0_V_id_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_axi0_V_id_V_0_data_out_assign_proc : process(src_axi0_V_id_V_0_payload_A, src_axi0_V_id_V_0_payload_B, src_axi0_V_id_V_0_sel)
    begin
        if ((src_axi0_V_id_V_0_sel = ap_const_logic_1)) then 
            src_axi0_V_id_V_0_data_out <= src_axi0_V_id_V_0_payload_B;
        else 
            src_axi0_V_id_V_0_data_out <= src_axi0_V_id_V_0_payload_A;
        end if; 
    end process;

    src_axi0_V_id_V_0_load_A <= (src_axi0_V_id_V_0_state_cmp_full and not(src_axi0_V_id_V_0_sel_wr));
    src_axi0_V_id_V_0_load_B <= (src_axi0_V_id_V_0_state_cmp_full and src_axi0_V_id_V_0_sel_wr);
    src_axi0_V_id_V_0_sel <= src_axi0_V_id_V_0_sel_rd;
    src_axi0_V_id_V_0_state_cmp_full <= '0' when (src_axi0_V_id_V_0_state = ap_const_lv2_1) else '1';
    src_axi0_V_id_V_0_vld_in <= src_axi0_TVALID;
    src_axi0_V_id_V_0_vld_out <= src_axi0_V_id_V_0_state(0);
    src_axi0_V_keep_V_0_ack_in <= src_axi0_V_keep_V_0_state(1);

    src_axi0_V_keep_V_0_ack_out_assign_proc : process(icmp_ln887_1_reg_491, ap_CS_fsm_state3, grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY)
    begin
        if (((icmp_ln887_1_reg_491 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_axi0_V_keep_V_0_ack_out <= grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY;
        else 
            src_axi0_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_axi0_V_keep_V_0_data_out_assign_proc : process(src_axi0_V_keep_V_0_payload_A, src_axi0_V_keep_V_0_payload_B, src_axi0_V_keep_V_0_sel)
    begin
        if ((src_axi0_V_keep_V_0_sel = ap_const_logic_1)) then 
            src_axi0_V_keep_V_0_data_out <= src_axi0_V_keep_V_0_payload_B;
        else 
            src_axi0_V_keep_V_0_data_out <= src_axi0_V_keep_V_0_payload_A;
        end if; 
    end process;

    src_axi0_V_keep_V_0_load_A <= (src_axi0_V_keep_V_0_state_cmp_full and not(src_axi0_V_keep_V_0_sel_wr));
    src_axi0_V_keep_V_0_load_B <= (src_axi0_V_keep_V_0_state_cmp_full and src_axi0_V_keep_V_0_sel_wr);
    src_axi0_V_keep_V_0_sel <= src_axi0_V_keep_V_0_sel_rd;
    src_axi0_V_keep_V_0_state_cmp_full <= '0' when (src_axi0_V_keep_V_0_state = ap_const_lv2_1) else '1';
    src_axi0_V_keep_V_0_vld_in <= src_axi0_TVALID;
    src_axi0_V_keep_V_0_vld_out <= src_axi0_V_keep_V_0_state(0);
    src_axi0_V_last_V_0_ack_in <= src_axi0_V_last_V_0_state(1);

    src_axi0_V_last_V_0_ack_out_assign_proc : process(icmp_ln887_1_reg_491, ap_CS_fsm_state3, grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY)
    begin
        if (((icmp_ln887_1_reg_491 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_axi0_V_last_V_0_ack_out <= grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY;
        else 
            src_axi0_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_axi0_V_last_V_0_data_out_assign_proc : process(src_axi0_V_last_V_0_payload_A, src_axi0_V_last_V_0_payload_B, src_axi0_V_last_V_0_sel)
    begin
        if ((src_axi0_V_last_V_0_sel = ap_const_logic_1)) then 
            src_axi0_V_last_V_0_data_out <= src_axi0_V_last_V_0_payload_B;
        else 
            src_axi0_V_last_V_0_data_out <= src_axi0_V_last_V_0_payload_A;
        end if; 
    end process;

    src_axi0_V_last_V_0_load_A <= (src_axi0_V_last_V_0_state_cmp_full and not(src_axi0_V_last_V_0_sel_wr));
    src_axi0_V_last_V_0_load_B <= (src_axi0_V_last_V_0_state_cmp_full and src_axi0_V_last_V_0_sel_wr);
    src_axi0_V_last_V_0_sel <= src_axi0_V_last_V_0_sel_rd;
    src_axi0_V_last_V_0_state_cmp_full <= '0' when (src_axi0_V_last_V_0_state = ap_const_lv2_1) else '1';
    src_axi0_V_last_V_0_vld_in <= src_axi0_TVALID;
    src_axi0_V_last_V_0_vld_out <= src_axi0_V_last_V_0_state(0);
    src_axi0_V_strb_V_0_ack_in <= src_axi0_V_strb_V_0_state(1);

    src_axi0_V_strb_V_0_ack_out_assign_proc : process(icmp_ln887_1_reg_491, ap_CS_fsm_state3, grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY)
    begin
        if (((icmp_ln887_1_reg_491 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_axi0_V_strb_V_0_ack_out <= grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY;
        else 
            src_axi0_V_strb_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_axi0_V_strb_V_0_data_out_assign_proc : process(src_axi0_V_strb_V_0_payload_A, src_axi0_V_strb_V_0_payload_B, src_axi0_V_strb_V_0_sel)
    begin
        if ((src_axi0_V_strb_V_0_sel = ap_const_logic_1)) then 
            src_axi0_V_strb_V_0_data_out <= src_axi0_V_strb_V_0_payload_B;
        else 
            src_axi0_V_strb_V_0_data_out <= src_axi0_V_strb_V_0_payload_A;
        end if; 
    end process;

    src_axi0_V_strb_V_0_load_A <= (src_axi0_V_strb_V_0_state_cmp_full and not(src_axi0_V_strb_V_0_sel_wr));
    src_axi0_V_strb_V_0_load_B <= (src_axi0_V_strb_V_0_state_cmp_full and src_axi0_V_strb_V_0_sel_wr);
    src_axi0_V_strb_V_0_sel <= src_axi0_V_strb_V_0_sel_rd;
    src_axi0_V_strb_V_0_state_cmp_full <= '0' when (src_axi0_V_strb_V_0_state = ap_const_lv2_1) else '1';
    src_axi0_V_strb_V_0_vld_in <= src_axi0_TVALID;
    src_axi0_V_strb_V_0_vld_out <= src_axi0_V_strb_V_0_state(0);
    src_axi0_V_user_V_0_ack_in <= src_axi0_V_user_V_0_state(1);

    src_axi0_V_user_V_0_ack_out_assign_proc : process(icmp_ln887_1_reg_491, ap_CS_fsm_state3, grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY)
    begin
        if (((icmp_ln887_1_reg_491 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            src_axi0_V_user_V_0_ack_out <= grp_AXIvideo2Mat2_fu_273_src_axi0_TREADY;
        else 
            src_axi0_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    src_axi0_V_user_V_0_data_out_assign_proc : process(src_axi0_V_user_V_0_payload_A, src_axi0_V_user_V_0_payload_B, src_axi0_V_user_V_0_sel)
    begin
        if ((src_axi0_V_user_V_0_sel = ap_const_logic_1)) then 
            src_axi0_V_user_V_0_data_out <= src_axi0_V_user_V_0_payload_B;
        else 
            src_axi0_V_user_V_0_data_out <= src_axi0_V_user_V_0_payload_A;
        end if; 
    end process;

    src_axi0_V_user_V_0_load_A <= (src_axi0_V_user_V_0_state_cmp_full and not(src_axi0_V_user_V_0_sel_wr));
    src_axi0_V_user_V_0_load_B <= (src_axi0_V_user_V_0_state_cmp_full and src_axi0_V_user_V_0_sel_wr);
    src_axi0_V_user_V_0_sel <= src_axi0_V_user_V_0_sel_rd;
    src_axi0_V_user_V_0_state_cmp_full <= '0' when (src_axi0_V_user_V_0_state = ap_const_lv2_1) else '1';
    src_axi0_V_user_V_0_vld_in <= src_axi0_TVALID;
    src_axi0_V_user_V_0_vld_out <= src_axi0_V_user_V_0_state(0);
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln330_fu_357_p1 <= op2_assign_reg_263(4 - 1 downto 0);
    zext_ln330_1_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_367_p3),32));
    zext_ln330_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_342_p4),64));
end behav;
